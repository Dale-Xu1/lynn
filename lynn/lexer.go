package lynn

import (
	"bufio"
	"fmt"
	"slices"
)

// Represents type of token as an enumerated integer.
type TokenType uint
// Location struct. Holds line and column of token.
type Location struct { Line, Col int }
// Token struct. Holds type, value, and location of token.
type Token struct {
    Type       TokenType
    Value      string
    Start, End Location
}

// Represents a range between characters.
type Range struct { Min, Max rune }

const (WHITESPACE TokenType = iota; COMMENT; RULE; PRECEDENCE; TOKEN; FRAGMENT; LEFT; RIGHT; ERROR; SKIP; EQUAL; PLUS; STAR; QUESTION; DOT; BAR; HASH; PERCENT; SEMI; COLON; L_PAREN; R_PAREN; ARROW; IDENTIFIER; STRING; CLASS; EOF)
func (t TokenType) String() string { return typeName[t] }
var typeName = map[TokenType]string { 0: "WHITESPACE", 1: "COMMENT", 2: "RULE", 3: "PRECEDENCE", 4: "TOKEN", 5: "FRAGMENT", 6: "LEFT", 7: "RIGHT", 8: "ERROR", 9: "SKIP", 10: "EQUAL", 11: "PLUS", 12: "STAR", 13: "QUESTION", 14: "DOT", 15: "BAR", 16: "HASH", 17: "PERCENT", 18: "SEMI", 19: "COLON", 20: "L_PAREN", 21: "R_PAREN", 22: "ARROW", 23: "IDENTIFIER", 24: "STRING", 25: "CLASS", 26: "EOF" }
var skip = map[TokenType]struct{} { 0: {}, 1: {} }

var ranges = []Range { { '\x00', '\x00' }, { '\x01', '\b' }, { '\t', '\t' }, { '\n', '\n' }, { '\v', '\f' }, { '\r', '\r' }, { '\x0e', '\x1f' }, { ' ', ' ' }, { '!', '!' }, { '"', '"' }, { '#', '#' }, { '$', '$' }, { '%', '%' }, { '&', '\'' }, { '(', '(' }, { ')', ')' }, { '*', '*' }, { '+', '+' }, { ',', ',' }, { '-', '-' }, { '.', '.' }, { '/', '/' }, { '0', '9' }, { ':', ':' }, { ';', ';' }, { '<', '<' }, { '=', '=' }, { '>', '>' }, { '?', '?' }, { '@', '@' }, { 'A', 'T' }, { 'U', 'U' }, { 'V', 'Z' }, { '[', '[' }, { '\\', '\\' }, { ']', ']' }, { '^', '^' }, { '_', '_' }, { '`', '`' }, { 'a', 'a' }, { 'b', 'b' }, { 'c', 'c' }, { 'd', 'd' }, { 'e', 'e' }, { 'f', 'f' }, { 'g', 'g' }, { 'h', 'h' }, { 'i', 'i' }, { 'j', 'j' }, { 'k', 'k' }, { 'l', 'l' }, { 'm', 'm' }, { 'n', 'n' }, { 'o', 'o' }, { 'p', 'p' }, { 'q', 'q' }, { 'r', 'r' }, { 's', 's' }, { 't', 't' }, { 'u', 'u' }, { 'v', 'w' }, { 'x', 'x' }, { 'y', 'z' }, { '{', '{' }, { '|', '|' }, { '}', '\U0010ffff' } }
var transitions = []map[int]int {
    { 14: 63, 43: 47, 15: 64, 31: 51, 64: 75, 40: 51, 24: 59, 51: 51, 44: 11, 5: 26, 30: 51, 16: 71, 0: 23, 26: 16, 33: 43, 17: 12, 48: 51, 56: 32, 53: 51, 28: 33, 45: 51, 3: 26, 19: 27, 54: 61, 46: 51, 50: 18, 37: 51, 39: 51, 61: 51, 55: 51, 23: 34, 57: 67, 42: 51, 58: 22, 21: 1, 20: 53, 12: 68, 49: 51, 47: 51, 62: 51, 59: 51, 41: 51, 7: 26, 60: 51, 10: 69, 52: 51, 9: 73, 2: 26, 32: 51 },
    { 21: 9, 16: 38 },
    { 22: 10, 41: 10, 54: 10, 61: 10, 31: 10, 45: 10, 42: 10, 46: 10, 53: 10, 44: 10, 52: 10, 39: 10, 56: 10, 47: 10, 51: 10, 58: 10, 48: 10, 30: 10, 60: 10, 43: 10, 40: 10, 57: 10, 50: 10, 49: 10, 59: 10, 62: 10, 32: 10, 55: 10 },
    { 55: 4, 60: 4, 45: 4, 56: 4, 31: 4, 50: 4, 47: 4, 61: 4, 32: 4, 53: 4, 22: 4, 46: 4, 44: 4, 52: 4, 51: 4, 62: 4, 59: 4, 48: 4, 42: 4, 54: 4, 43: 4, 40: 4, 58: 4, 30: 4, 49: 4, 57: 4, 39: 4, 41: 4 },
    { 46: 24, 22: 24, 58: 24, 61: 24, 41: 24, 52: 24, 45: 24, 40: 24, 43: 24, 56: 24, 59: 24, 32: 24, 62: 24, 49: 24, 51: 24, 44: 24, 55: 24, 54: 24, 30: 24, 50: 24, 60: 24, 53: 24, 39: 24, 47: 24, 42: 24, 31: 24, 48: 24, 57: 24 },
    { 47: 51, 57: 51, 46: 51, 37: 51, 51: 51, 44: 51, 53: 51, 49: 51, 32: 51, 50: 51, 56: 51, 42: 51, 54: 51, 41: 51, 55: 51, 61: 51, 62: 51, 52: 51, 30: 51, 45: 51, 40: 51, 48: 51, 43: 8, 31: 51, 58: 51, 39: 51, 59: 51, 22: 51, 60: 51 },
    { 37: 51, 53: 51, 44: 28, 42: 51, 59: 51, 46: 51, 40: 51, 43: 51, 32: 51, 39: 51, 60: 51, 22: 51, 56: 51, 55: 51, 54: 51, 57: 51, 47: 51, 51: 51, 45: 51, 52: 51, 62: 51, 31: 51, 58: 51, 30: 51, 41: 51, 48: 51, 50: 51, 49: 51, 61: 51 },
    { 57: 51, 22: 51, 43: 51, 55: 51, 62: 51, 44: 51, 46: 51, 50: 51, 48: 51, 41: 51, 54: 51, 45: 51, 58: 51, 39: 51, 59: 51, 51: 51, 53: 54, 30: 51, 42: 51, 47: 51, 49: 51, 32: 51, 60: 51, 40: 51, 52: 51, 37: 51, 56: 51, 61: 51, 31: 51 },
    { 51: 51, 43: 51, 58: 51, 52: 51, 60: 51, 48: 51, 22: 51, 39: 51, 41: 51, 53: 51, 45: 51, 37: 51, 30: 51, 54: 51, 49: 51, 42: 51, 62: 51, 50: 51, 32: 51, 31: 51, 55: 51, 61: 51, 40: 51, 47: 51, 57: 51, 44: 51, 59: 51, 46: 51, 56: 51 },
    { 7: 9, 41: 9, 43: 9, 32: 9, 20: 9, 15: 9, 42: 9, 10: 9, 34: 9, 35: 9, 57: 9, 54: 9, 12: 9, 55: 9, 37: 9, 11: 9, 1: 9, 8: 9, 13: 9, 30: 9, 9: 9, 16: 9, 44: 9, 21: 9, 5: 30, 40: 9, 29: 9, 28: 9, 26: 9, 6: 9, 22: 9, 60: 9, 53: 9, 49: 9, 56: 9, 46: 9, 36: 9, 65: 9, 23: 9, 48: 9, 38: 9, 59: 9, 39: 9, 62: 9, 0: 30, 64: 9, 17: 9, 3: 30, 45: 9, 14: 9, 47: 9, 4: 9, 33: 9, 19: 9, 50: 9, 63: 9, 24: 9, 52: 9, 2: 9, 31: 9, 58: 9, 61: 9, 25: 9, 27: 9, 51: 9, 18: 9 },
    { 46: 70, 53: 70, 55: 70, 40: 70, 43: 70, 30: 70, 60: 70, 56: 70, 59: 70, 52: 70, 61: 70, 57: 70, 22: 70, 41: 70, 47: 70, 54: 70, 49: 70, 31: 70, 39: 70, 44: 70, 58: 70, 48: 70, 50: 70, 45: 70, 32: 70, 62: 70, 42: 70, 51: 70 },
    { 32: 51, 43: 51, 55: 51, 22: 51, 59: 51, 30: 51, 60: 51, 46: 51, 49: 51, 48: 51, 53: 51, 56: 55, 41: 51, 45: 51, 31: 51, 62: 51, 52: 51, 44: 51, 51: 51, 58: 51, 42: 51, 40: 51, 57: 51, 39: 51, 50: 51, 61: 51, 54: 51, 37: 51, 47: 51 },
    { },
    { },
    { 16: 43, 53: 43, 19: 43, 1: 43, 48: 43, 17: 43, 26: 43, 51: 43, 58: 43, 12: 43, 32: 43, 49: 43, 38: 43, 11: 43, 43: 43, 30: 43, 29: 43, 46: 43, 20: 43, 33: 43, 22: 43, 57: 43, 21: 43, 35: 43, 36: 43, 7: 43, 45: 43, 25: 43, 31: 3, 13: 43, 2: 43, 34: 43, 60: 43, 62: 43, 65: 43, 47: 43, 44: 43, 6: 43, 50: 43, 4: 43, 41: 43, 24: 43, 37: 43, 54: 43, 27: 43, 15: 43, 55: 43, 40: 43, 28: 43, 18: 43, 56: 43, 9: 43, 23: 43, 8: 43, 42: 43, 59: 44, 39: 43, 64: 43, 63: 43, 14: 43, 61: 72, 52: 43, 10: 43 },
    { 61: 51, 40: 51, 54: 51, 51: 51, 56: 51, 44: 51, 50: 51, 48: 51, 46: 51, 49: 51, 58: 51, 60: 51, 31: 51, 59: 51, 41: 51, 47: 51, 32: 51, 57: 51, 62: 51, 55: 51, 42: 51, 22: 51, 39: 51, 43: 51, 45: 51, 53: 51, 52: 51, 37: 51, 30: 51 },
    { },
    { 46: 51, 40: 51, 59: 51, 45: 51, 31: 51, 57: 51, 49: 51, 43: 51, 42: 51, 37: 51, 54: 51, 39: 51, 48: 51, 22: 51, 62: 51, 56: 51, 51: 51, 60: 51, 55: 51, 53: 51, 50: 51, 32: 51, 52: 51, 58: 51, 30: 51, 47: 51, 44: 51, 41: 51, 61: 51 },
    { 37: 51, 43: 6, 52: 51, 61: 51, 30: 51, 51: 51, 45: 51, 53: 51, 58: 51, 41: 51, 60: 51, 56: 51, 42: 51, 31: 51, 32: 51, 48: 51, 22: 51, 49: 51, 40: 51, 39: 51, 55: 51, 59: 51, 46: 51, 57: 51, 50: 51, 54: 51, 62: 51, 47: 51, 44: 51 },
    { 48: 51, 46: 51, 43: 52, 50: 51, 37: 51, 30: 51, 39: 51, 32: 51, 22: 51, 59: 51, 53: 51, 45: 51, 61: 51, 52: 51, 42: 51, 60: 51, 49: 51, 62: 51, 31: 51, 54: 51, 47: 51, 57: 51, 44: 51, 58: 51, 56: 51, 40: 51, 41: 51, 51: 51, 55: 51 },
    { 42: 51, 59: 51, 49: 51, 44: 51, 56: 51, 53: 51, 30: 51, 31: 51, 54: 51, 45: 51, 57: 51, 40: 51, 22: 51, 60: 51, 48: 51, 61: 51, 32: 51, 52: 51, 46: 51, 51: 51, 47: 51, 41: 51, 43: 51, 39: 51, 62: 51, 58: 51, 55: 51, 50: 51, 37: 51 },
    { 41: 51, 22: 51, 49: 51, 45: 51, 31: 51, 39: 51, 59: 51, 56: 51, 40: 51, 46: 51, 61: 51, 50: 51, 57: 51, 30: 51, 48: 51, 37: 51, 52: 51, 54: 51, 55: 51, 47: 51, 62: 51, 51: 51, 60: 51, 32: 51, 58: 51, 43: 78, 53: 51, 44: 51, 42: 51 },
    { 31: 51, 62: 51, 45: 51, 60: 51, 22: 51, 55: 51, 49: 51, 37: 51, 42: 51, 30: 51, 50: 51, 59: 51, 56: 51, 46: 51, 39: 51, 61: 51, 52: 51, 41: 51, 40: 51, 54: 51, 32: 51, 53: 29, 43: 51, 48: 51, 57: 51, 51: 51, 58: 51, 44: 51, 47: 51 },
    { },
    { 49: 56, 44: 56, 52: 56, 54: 56, 56: 56, 41: 56, 31: 56, 59: 56, 30: 56, 43: 56, 39: 56, 60: 56, 62: 56, 40: 56, 58: 56, 45: 56, 47: 56, 32: 56, 51: 56, 53: 56, 42: 56, 61: 56, 46: 56, 48: 56, 55: 56, 50: 56, 57: 56, 22: 56 },
    { 22: 72, 32: 72, 40: 72, 43: 72, 44: 72, 57: 72, 51: 72, 47: 72, 53: 72, 54: 72, 58: 72, 56: 72, 50: 72, 49: 72, 39: 72, 42: 72, 41: 72, 52: 72, 45: 72, 30: 72, 59: 72, 62: 72, 46: 72, 31: 72, 60: 72, 55: 72, 48: 72, 61: 72 },
    { 5: 26, 7: 26, 2: 26, 3: 26 },
    { 27: 77 },
    { 42: 51, 22: 51, 58: 62, 45: 51, 48: 51, 56: 51, 31: 51, 55: 51, 32: 51, 46: 51, 54: 51, 50: 51, 59: 51, 53: 51, 61: 51, 47: 51, 57: 51, 40: 51, 60: 51, 49: 51, 43: 51, 51: 51, 52: 51, 30: 51, 62: 51, 37: 51, 41: 51, 44: 51, 39: 51 },
    { 45: 51, 40: 51, 39: 51, 54: 51, 53: 51, 56: 51, 60: 51, 50: 51, 32: 51, 61: 51, 30: 51, 58: 51, 22: 51, 55: 51, 49: 19, 48: 51, 43: 51, 37: 51, 44: 51, 41: 51, 47: 51, 31: 51, 42: 51, 62: 51, 51: 51, 57: 51, 52: 51, 46: 51, 59: 51 },
    { },
    { 31: 38, 21: 30, 58: 38, 37: 38, 42: 38, 19: 38, 18: 38, 48: 38, 44: 38, 64: 38, 35: 38, 52: 38, 13: 38, 55: 38, 32: 38, 63: 38, 33: 38, 51: 38, 38: 38, 29: 38, 23: 38, 30: 38, 53: 38, 61: 38, 39: 38, 27: 38, 9: 38, 6: 38, 4: 38, 49: 38, 41: 38, 34: 38, 11: 38, 40: 38, 22: 38, 12: 38, 43: 38, 3: 38, 28: 38, 36: 38, 10: 38, 8: 38, 7: 38, 62: 38, 26: 38, 14: 38, 54: 38, 17: 38, 45: 38, 56: 38, 59: 38, 57: 38, 20: 38, 50: 38, 15: 38, 24: 38, 46: 38, 16: 38, 2: 38, 25: 38, 47: 38, 5: 38, 1: 38, 60: 38, 65: 38 },
    { 49: 51, 41: 51, 44: 51, 56: 51, 60: 51, 30: 51, 32: 51, 54: 51, 55: 51, 52: 51, 22: 51, 51: 51, 37: 51, 61: 51, 42: 51, 48: 51, 59: 66, 39: 51, 58: 51, 45: 51, 43: 51, 50: 51, 40: 51, 53: 51, 62: 51, 31: 51, 57: 51, 47: 57, 46: 51 },
    { },
    { },
    { 31: 51, 37: 51, 30: 51, 55: 51, 54: 51, 49: 51, 51: 51, 46: 51, 42: 51, 56: 51, 47: 50, 32: 51, 45: 51, 22: 51, 61: 51, 59: 51, 60: 51, 44: 51, 52: 51, 57: 51, 58: 51, 62: 51, 39: 51, 48: 51, 40: 51, 43: 51, 50: 51, 41: 51, 53: 51 },
    { 44: 37, 48: 37, 43: 37, 52: 37, 54: 37, 53: 37, 30: 37, 61: 37, 39: 37, 56: 37, 59: 37, 22: 37, 47: 37, 32: 37, 41: 37, 60: 37, 40: 37, 42: 37, 57: 37, 58: 37, 49: 37, 31: 37, 55: 37, 50: 37, 62: 37, 45: 37, 46: 37, 51: 37 },
    { 60: 41, 30: 41, 56: 41, 55: 41, 58: 41, 52: 41, 46: 41, 51: 41, 61: 41, 41: 41, 48: 41, 59: 41, 45: 41, 53: 41, 54: 41, 22: 41, 31: 41, 43: 41, 50: 41, 42: 41, 57: 41, 47: 41, 62: 41, 32: 41, 39: 41, 40: 41, 49: 41, 44: 41 },
    { 53: 38, 5: 38, 31: 38, 9: 38, 61: 38, 24: 38, 34: 38, 35: 38, 58: 38, 62: 38, 29: 38, 13: 38, 19: 38, 15: 38, 44: 38, 17: 38, 36: 38, 41: 38, 25: 38, 64: 38, 37: 38, 6: 38, 12: 38, 1: 38, 54: 38, 39: 38, 56: 38, 30: 38, 40: 38, 18: 38, 48: 38, 32: 38, 55: 38, 11: 38, 46: 38, 14: 38, 57: 38, 49: 38, 59: 38, 38: 38, 16: 31, 63: 38, 7: 38, 8: 38, 51: 38, 21: 38, 42: 38, 4: 38, 3: 38, 26: 38, 20: 38, 28: 38, 2: 38, 50: 38, 65: 38, 43: 38, 22: 38, 52: 38, 60: 38, 23: 38, 27: 38, 47: 38, 45: 38, 33: 38, 10: 38 },
    { 47: 40, 48: 40, 60: 40, 45: 40, 39: 40, 49: 40, 22: 40, 57: 40, 50: 40, 31: 40, 44: 40, 32: 40, 55: 40, 42: 40, 61: 40, 59: 40, 56: 40, 51: 40, 58: 40, 43: 40, 53: 40, 30: 40, 52: 40, 54: 40, 40: 40, 62: 40, 41: 40, 46: 40 },
    { 58: 73, 57: 73, 56: 73, 53: 73, 59: 73, 44: 73, 43: 73, 45: 73, 47: 73, 49: 73, 42: 73, 22: 73, 30: 73, 31: 73, 54: 73, 32: 73, 39: 73, 46: 73, 41: 73, 61: 73, 62: 73, 40: 73, 48: 73, 50: 73, 52: 73, 60: 73, 51: 73, 55: 73 },
    { 62: 2, 22: 2, 52: 2, 45: 2, 56: 2, 39: 2, 47: 2, 59: 2, 61: 2, 40: 2, 31: 2, 32: 2, 51: 2, 43: 2, 58: 2, 41: 2, 50: 2, 60: 2, 57: 2, 30: 2, 42: 2, 48: 2, 54: 2, 53: 2, 49: 2, 44: 2, 55: 2, 46: 2 },
    { 22: 51, 47: 51, 37: 51, 61: 51, 54: 51, 45: 51, 55: 51, 43: 51, 49: 51, 39: 51, 56: 7, 41: 51, 30: 51, 59: 51, 32: 51, 58: 51, 40: 51, 51: 51, 62: 51, 52: 51, 48: 51, 42: 51, 46: 51, 57: 51, 31: 51, 50: 51, 44: 51, 53: 51, 60: 51 },
    { 26: 43, 59: 43, 46: 43, 2: 43, 44: 43, 27: 43, 37: 43, 15: 43, 9: 43, 18: 43, 23: 43, 7: 43, 49: 43, 41: 43, 38: 43, 21: 43, 35: 13, 19: 43, 34: 14, 43: 43, 50: 43, 12: 43, 17: 43, 29: 43, 24: 43, 25: 43, 33: 43, 28: 43, 4: 43, 10: 43, 11: 43, 65: 43, 52: 43, 62: 43, 20: 43, 31: 43, 40: 43, 58: 43, 47: 43, 8: 43, 1: 43, 51: 43, 55: 43, 14: 43, 16: 43, 36: 43, 32: 43, 54: 43, 63: 43, 56: 43, 45: 43, 48: 43, 22: 43, 42: 43, 61: 43, 6: 43, 30: 43, 64: 43, 53: 43, 60: 43, 39: 43, 57: 43, 13: 43 },
    { 42: 25, 48: 25, 59: 25, 40: 25, 55: 25, 58: 25, 53: 25, 54: 25, 60: 25, 56: 25, 52: 25, 41: 25, 45: 25, 50: 25, 39: 25, 49: 25, 43: 25, 44: 25, 61: 25, 31: 25, 51: 25, 46: 25, 57: 25, 32: 25, 62: 25, 22: 25, 30: 25, 47: 25 },
    { 55: 51, 31: 51, 45: 51, 37: 51, 51: 51, 32: 51, 61: 51, 39: 51, 48: 51, 59: 51, 53: 51, 30: 51, 44: 51, 42: 51, 40: 51, 57: 51, 60: 51, 41: 51, 56: 51, 62: 51, 47: 51, 43: 51, 58: 51, 50: 51, 54: 51, 46: 51, 49: 51, 52: 51, 22: 51 },
    { 36: 73, 17: 73, 65: 73, 10: 73, 58: 73, 25: 73, 35: 73, 13: 73, 22: 73, 27: 73, 64: 73, 41: 73, 44: 73, 23: 73, 20: 73, 12: 73, 30: 73, 8: 73, 40: 73, 51: 73, 33: 73, 6: 73, 47: 73, 55: 73, 37: 73, 49: 73, 29: 73, 18: 73, 56: 73, 1: 73, 4: 73, 43: 73, 7: 73, 14: 73, 59: 10, 9: 73, 61: 39, 11: 73, 63: 73, 15: 73, 60: 73, 39: 73, 32: 73, 31: 36, 57: 73, 19: 73, 42: 73, 46: 73, 2: 73, 34: 73, 28: 73, 38: 73, 24: 73, 54: 73, 50: 73, 48: 73, 45: 73, 52: 73, 62: 73, 16: 73, 21: 73, 26: 73, 53: 73 },
    { 62: 51, 48: 51, 44: 51, 56: 42, 39: 51, 37: 51, 31: 51, 30: 51, 43: 51, 57: 51, 45: 51, 61: 51, 50: 51, 49: 51, 58: 51, 47: 51, 54: 51, 59: 51, 42: 51, 41: 51, 32: 51, 60: 51, 51: 51, 53: 51, 46: 51, 55: 51, 40: 51, 22: 51, 52: 51 },
    { 45: 51, 40: 51, 57: 51, 61: 51, 59: 51, 62: 51, 49: 51, 44: 51, 30: 51, 54: 51, 32: 51, 39: 51, 43: 51, 22: 51, 41: 51, 46: 51, 48: 51, 58: 51, 56: 51, 47: 51, 51: 51, 55: 51, 42: 51, 53: 51, 52: 51, 50: 51, 31: 51, 37: 51, 60: 51 },
    { 40: 51, 42: 51, 37: 51, 50: 51, 57: 51, 55: 51, 56: 51, 48: 51, 52: 51, 53: 51, 32: 51, 61: 51, 41: 51, 47: 51, 60: 51, 45: 51, 46: 76, 39: 51, 59: 51, 44: 51, 30: 51, 62: 51, 49: 51, 43: 51, 22: 51, 58: 51, 51: 51, 31: 51, 54: 51 },
    { 37: 51, 47: 51, 45: 51, 59: 51, 46: 51, 40: 51, 43: 51, 54: 15, 60: 51, 49: 51, 58: 51, 39: 51, 51: 51, 61: 51, 30: 51, 52: 51, 56: 51, 44: 51, 50: 51, 31: 51, 48: 51, 57: 51, 22: 51, 55: 51, 62: 51, 32: 51, 53: 51, 41: 51, 42: 51 },
    { 42: 51, 46: 51, 49: 51, 41: 51, 22: 51, 61: 51, 45: 51, 51: 51, 37: 51, 56: 51, 54: 51, 53: 51, 32: 51, 47: 51, 30: 51, 31: 51, 39: 51, 48: 51, 44: 51, 52: 51, 59: 51, 57: 51, 40: 51, 58: 51, 62: 51, 55: 51, 43: 51, 60: 51, 50: 51 },
    { 43: 51, 45: 51, 39: 51, 61: 51, 47: 51, 30: 51, 37: 51, 40: 51, 51: 51, 46: 51, 32: 51, 59: 51, 44: 51, 48: 51, 41: 51, 55: 51, 57: 51, 58: 51, 50: 51, 62: 51, 52: 20, 49: 51, 22: 51, 31: 51, 54: 51, 56: 51, 53: 51, 42: 51, 60: 51 },
    { },
    { 56: 58, 40: 51, 47: 51, 49: 51, 37: 51, 50: 51, 55: 51, 45: 51, 53: 51, 59: 51, 60: 51, 22: 51, 57: 51, 43: 51, 54: 51, 32: 51, 52: 51, 51: 51, 44: 51, 42: 51, 61: 51, 31: 51, 46: 51, 41: 51, 30: 51, 39: 51, 58: 51, 62: 51, 48: 51 },
    { 53: 51, 51: 51, 32: 51, 48: 51, 47: 51, 42: 51, 56: 51, 55: 51, 54: 51, 62: 51, 40: 51, 31: 51, 57: 51, 44: 51, 45: 51, 22: 51, 52: 51, 39: 65, 46: 51, 58: 51, 37: 51, 49: 51, 41: 51, 61: 51, 60: 51, 59: 51, 50: 51, 43: 51, 30: 51 },
    { 30: 44, 42: 44, 55: 44, 60: 44, 61: 44, 47: 44, 49: 44, 54: 44, 40: 44, 31: 44, 58: 44, 45: 44, 53: 44, 39: 44, 43: 44, 48: 44, 59: 44, 22: 44, 51: 44, 52: 44, 50: 44, 44: 44, 56: 44, 57: 44, 41: 44, 32: 44, 46: 44, 62: 44 },
    { 41: 51, 43: 51, 49: 51, 45: 49, 22: 51, 40: 51, 50: 51, 60: 51, 51: 51, 61: 51, 53: 51, 62: 51, 58: 51, 31: 51, 54: 51, 42: 51, 47: 51, 30: 51, 56: 51, 55: 51, 59: 51, 39: 51, 52: 51, 46: 51, 48: 51, 44: 51, 57: 51, 37: 51, 32: 51 },
    { 44: 51, 39: 51, 47: 51, 62: 51, 42: 51, 41: 51, 59: 51, 22: 51, 32: 51, 54: 51, 55: 51, 31: 51, 51: 51, 46: 51, 57: 51, 58: 51, 48: 51, 56: 51, 40: 51, 45: 51, 37: 51, 60: 51, 53: 51, 50: 51, 61: 51, 49: 51, 30: 51, 43: 51, 52: 51 },
    { },
    { 46: 43, 50: 43, 60: 43, 52: 43, 55: 43, 54: 43, 59: 43, 42: 43, 49: 43, 61: 43, 43: 43, 51: 43, 58: 43, 32: 43, 62: 43, 45: 43, 22: 43, 39: 43, 30: 43, 41: 43, 47: 43, 44: 43, 56: 43, 48: 43, 57: 43, 53: 43, 40: 43, 31: 43 },
    { 42: 51, 51: 51, 52: 51, 40: 51, 22: 51, 58: 51, 61: 51, 46: 51, 54: 51, 39: 51, 30: 51, 49: 51, 57: 51, 50: 51, 60: 51, 47: 51, 43: 51, 31: 51, 62: 51, 55: 51, 32: 51, 59: 51, 56: 21, 37: 51, 53: 51, 48: 51, 45: 51, 41: 51, 44: 51 },
    { 45: 51, 60: 51, 57: 51, 61: 51, 48: 51, 40: 51, 32: 51, 41: 51, 44: 51, 51: 51, 62: 51, 42: 51, 37: 51, 22: 51, 54: 51, 52: 51, 49: 51, 59: 51, 31: 51, 53: 51, 58: 51, 50: 51, 55: 51, 43: 51, 30: 51, 39: 51, 47: 51, 46: 51, 56: 51 },
    { },
    { },
    { 60: 51, 53: 51, 46: 51, 39: 51, 57: 51, 51: 51, 48: 51, 47: 51, 56: 51, 59: 51, 31: 51, 62: 51, 41: 51, 30: 51, 45: 48, 58: 51, 40: 51, 44: 51, 42: 51, 52: 51, 32: 51, 43: 51, 55: 51, 54: 51, 61: 51, 22: 51, 50: 51, 37: 51, 49: 51 },
    { 55: 51, 31: 51, 53: 51, 39: 51, 47: 51, 54: 51, 50: 5, 30: 51, 51: 51, 57: 51, 56: 51, 46: 51, 22: 51, 37: 51, 62: 51, 42: 51, 44: 51, 60: 51, 45: 51, 41: 51, 32: 51, 49: 51, 40: 51, 48: 51, 43: 51, 52: 51, 58: 51, 61: 51, 59: 51 },
    { 57: 51, 41: 51, 60: 51, 46: 51, 44: 51, 49: 35, 22: 51, 47: 51, 58: 51, 61: 51, 53: 51, 54: 51, 45: 51, 52: 51, 42: 51, 32: 51, 59: 51, 39: 51, 43: 51, 56: 51, 62: 51, 48: 51, 51: 51, 30: 51, 37: 51, 40: 51, 50: 51, 55: 51, 31: 51 },
    { },
    { },
    { 45: 39, 47: 39, 49: 39, 48: 39, 58: 39, 55: 39, 44: 39, 50: 39, 42: 39, 32: 39, 41: 39, 62: 39, 30: 39, 60: 39, 61: 39, 40: 39, 52: 39, 54: 39, 39: 39, 43: 39, 53: 39, 57: 39, 46: 39, 59: 39, 56: 39, 51: 39, 22: 39, 31: 39 },
    { },
    { 53: 60, 32: 60, 49: 60, 45: 60, 39: 60, 58: 60, 59: 60, 30: 60, 46: 60, 52: 60, 22: 60, 31: 60, 47: 60, 50: 60, 61: 60, 43: 60, 44: 60, 40: 60, 51: 60, 42: 60, 41: 60, 54: 60, 62: 60, 57: 60, 55: 60, 56: 60, 60: 60, 48: 60 },
    { 12: 73, 59: 73, 42: 73, 7: 73, 6: 73, 21: 73, 31: 73, 51: 73, 10: 73, 36: 73, 23: 73, 14: 73, 56: 73, 47: 73, 35: 73, 16: 73, 26: 73, 28: 73, 37: 73, 43: 73, 46: 73, 50: 73, 13: 73, 45: 73, 18: 73, 11: 73, 53: 73, 60: 73, 32: 73, 55: 73, 57: 73, 38: 73, 64: 73, 30: 73, 17: 73, 1: 73, 48: 73, 44: 73, 2: 73, 29: 73, 49: 73, 61: 73, 33: 73, 62: 73, 25: 73, 4: 73, 52: 73, 39: 73, 41: 73, 19: 73, 24: 73, 63: 73, 34: 46, 9: 74, 40: 73, 54: 73, 8: 73, 58: 73, 27: 73, 15: 73, 22: 73, 65: 73, 20: 73 },
    { },
    { },
    { 30: 51, 61: 51, 47: 51, 51: 51, 57: 51, 42: 51, 60: 51, 59: 51, 22: 51, 58: 17, 48: 51, 49: 51, 45: 51, 53: 51, 56: 51, 41: 51, 44: 51, 50: 51, 54: 51, 46: 51, 32: 51, 43: 51, 39: 51, 40: 51, 37: 51, 55: 51, 62: 51, 31: 51, 52: 51 },
    { },
    { 40: 51, 55: 51, 49: 51, 47: 51, 61: 51, 56: 51, 59: 51, 52: 51, 57: 51, 39: 51, 45: 51, 43: 51, 53: 51, 46: 51, 22: 51, 37: 51, 41: 45, 60: 51, 51: 51, 32: 51, 50: 51, 48: 51, 30: 51, 31: 51, 44: 51, 42: 51, 62: 51, 58: 51, 54: 51 },
}
var accept = map[int]TokenType { 57: 23, 59: 18, 65: 23, 67: 23, 71: 12, 75: 15, 26: 0, 32: 23, 33: 13, 13: 25, 16: 10, 22: 23, 23: 26, 50: 23, 11: 23, 30: 1, 34: 19, 42: 23, 54: 23, 58: 8, 62: 6, 68: 17, 20: 4, 52: 23, 63: 20, 69: 16, 12: 11, 28: 23, 55: 23, 74: 24, 77: 22, 78: 23, 29: 23, 21: 23, 7: 23, 8: 2, 17: 7, 61: 23, 76: 23, 5: 23, 15: 9, 18: 23, 53: 14, 64: 21, 6: 23, 19: 23, 35: 23, 45: 3, 48: 5, 49: 23, 51: 23, 66: 23, 47: 23 }

// Base lexer interface.
type BaseLexer interface { Next() Token }
// Lexer struct. Produces token stream.
type Lexer struct {
    stream  *InputStream
    handler LexerErrorHandler
}

// Input stream struct. Produces character stream.
type InputStream struct {
    reader        *bufio.Reader
    location      Location
    buffer, stack []streamData
}
type streamData struct { char rune; location Location }

// Function called when the lexer encounters an error. Expected to bring input stream to synchronization point.
type LexerErrorHandler func (stream *InputStream, char rune, location Location)
var DEFAULT_LEXER_HANDLER = func (stream *InputStream, char rune, location Location) {
    // Format special characters
    var str string
    switch char {
    case ' ':        str = "space"
    case '\t':       str = "tab"
    case '\n', '\r': str = "new line"
    case 0:          str = "end of file"
    default:         str = fmt.Sprintf("character %q", string(char))
    }
    // Print formatted error message given an unexpected character
    fmt.Printf("Syntax error: Unexpected %s - %d:%d\n", str, location.Line, location.Col)
    // Find synchronization point
    var whitespace = []rune { 0, ' ', '\t', '\n', '\r' }
    for {
        if char := stream.next(); slices.Contains(whitespace, char) { break }
    }
}

// Returns new lexer struct. Initializes lexer with initial token.
func NewLexer(reader *bufio.Reader, handler LexerErrorHandler) *Lexer {
    stream := &InputStream { reader, Location { 1, 1 }, make([]streamData, 0), make([]streamData, 0) }
    lexer := &Lexer { stream, handler }
    return lexer
}

// Emits next token in stream.
func (l *Lexer) Next() Token {
    start := l.stream.location
    input, stack := make([]rune, 0), make([]int, 0)
    i, state := 0, 0
    for {
        // Read current character in stream and add to input
        char := l.stream.Read(); input = append(input, char)
        next, ok := transitions[state][searchRange(char)]
        if !ok { break } // Exit loop if we cannot transition from this state on the character
        // Store the visited states since the last occurring accepting state
        if _, ok := accept[state]; ok { stack = stack[:0] }
        stack = append(stack, state)
        state = next
        i++
    }
    // Backtrack to last accepting state
    var token TokenType
    for {
        // Unread current character
        l.stream.Unread()
        if t, ok := accept[state]; ok { token = t; break }
        if len(stack) == 0 {
            // If no accepting state was encountered, raise error and synchronize
            l.stream.synchronize(l.handler, input[i], l.stream.location)
            return l.Next() // Attempt to read token again
        }
        // Restore previously visited states
        state, stack = stack[len(stack) - 1], stack[:len(stack) - 1]
        i--
    }
    end := l.stream.stack[len(l.stream.stack) - 1].location
    l.stream.reset()
    if _, ok := skip[token]; ok { return l.Next() } // Skip token
    // Create token struct
    return Token { token, string(input[:i]), start, end }
}

// Returns the next character in the input stream while maintaining location.
func (i *InputStream) Read() rune {
    // Store previous location in stack and read next character
    l := i.location; char := i.next()
    i.stack = append(i.stack, streamData { char, l })
    return char
}

func (i *InputStream) next() rune {
    // If buffered data exists, consume it before requesting new data from the reader
    if len(i.buffer) > 0 {
        data := i.buffer[len(i.buffer) - 1]; i.buffer = i.buffer[:len(i.buffer) - 1]
        i.location = data.location
        return data.char
    }
    char, _, err := i.reader.ReadRune()
    if err != nil { return 0 } // Return a null character if stream does not have any more characters to emit
    // Update current location based on character read
    l := &i.location
    switch char {
    case '\n': l.Line++; l.Col = 1
    default: l.Col++
    }
    return char
}

// Unreads the current character in the input stream while maintaining location.
func (i *InputStream) Unread() {
    if len(i.stack) == 0 { return }
    data := i.stack[len(i.stack) - 1]; i.stack = i.stack[:len(i.stack) - 1]
    l := i.location; i.location = data.location
    i.buffer = append(i.buffer, streamData{ data.char, l })
}

// Releases previously read characters.
func (i *InputStream) reset() { i.stack = i.stack[:0] }
func (i *InputStream) synchronize(handler LexerErrorHandler, char rune, location Location) {
    i.reset()
    handler(i, char, location)
    i.reset()
}

// Run binary search on character to find index associated with the range that contains the character.
func searchRange(char rune) int {
    low, high := 0, len(ranges) - 1
    for low <= high {
        mid := (low + high) / 2
        r := ranges[mid]
        if char >= r.Min && char <= r.Max { return mid }
        if char > r.Max {
            low = mid + 1
        } else {
            high = mid - 1
        }
    }
    return -1
}

// FOR DEBUG PURPOSES:
// Consumes all tokens emitted by lexer and prints them to the standard output.
func (l *Lexer) PrintTokens() {
    for {
        token := l.Next()
        location := fmt.Sprintf("%d:%d-%d:%d", token.Start.Line, token.Start.Col, token.End.Line, token.End.Col)
        fmt.Printf("%-16s | %-16s %-16s\n", location, token.Type, token.Value)
        if token.Type == EOF { break }
    }
}
