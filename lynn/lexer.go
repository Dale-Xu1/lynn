package lynn

import (
	"bufio"
	"fmt"
	"os"
	"slices"
)

// Represents type of token as an enumerated integer.
type TokenType uint
// Location struct. Holds line and column of token.
type Location struct { Line, Col int }
// Token struct. Holds type, value, and location of token.
type Token struct {
    Type       TokenType
    Value      string
    Start, End Location
}

// Represents a range between characters.
type Range struct { Min, Max rune }

const (WHITESPACE TokenType = iota; COMMENT; RULE; PRECEDENCE; TOKEN; FRAGMENT; LEFT; RIGHT; ERROR; SKIP; EQUAL; PLUS; STAR; QUESTION; DOT; BAR; HASH; PERCENT; SEMI; COLON; L_PAREN; R_PAREN; ARROW; IDENTIFIER; STRING; CLASS; EOF)
func (t TokenType) String() string { return typeName[t] }
var typeName = map[TokenType]string { 0: "WHITESPACE", 1: "COMMENT", 2: "RULE", 3: "PRECEDENCE", 4: "TOKEN", 5: "FRAGMENT", 6: "LEFT", 7: "RIGHT", 8: "ERROR", 9: "SKIP", 10: "EQUAL", 11: "PLUS", 12: "STAR", 13: "QUESTION", 14: "DOT", 15: "BAR", 16: "HASH", 17: "PERCENT", 18: "SEMI", 19: "COLON", 20: "L_PAREN", 21: "R_PAREN", 22: "ARROW", 23: "IDENTIFIER", 24: "STRING", 25: "CLASS", 26: "EOF" }
var skip = map[TokenType]struct{} { 0: {}, 1: {} }

var ranges = []Range { { '\x00', '\x00' }, { '\x01', '\b' }, { '\t', '\t' }, { '\n', '\n' }, { '\v', '\f' }, { '\r', '\r' }, { '\x0e', '\x1f' }, { ' ', ' ' }, { '!', '!' }, { '"', '"' }, { '#', '#' }, { '$', '$' }, { '%', '%' }, { '&', '\'' }, { '(', '(' }, { ')', ')' }, { '*', '*' }, { '+', '+' }, { ',', ',' }, { '-', '-' }, { '.', '.' }, { '/', '/' }, { '0', '9' }, { ':', ':' }, { ';', ';' }, { '<', '<' }, { '=', '=' }, { '>', '>' }, { '?', '?' }, { '@', '@' }, { 'A', 'F' }, { 'G', 'T' }, { 'U', 'U' }, { 'V', 'Z' }, { '[', '[' }, { '\\', '\\' }, { ']', ']' }, { '^', '^' }, { '_', '_' }, { '`', '`' }, { 'a', 'a' }, { 'b', 'b' }, { 'c', 'c' }, { 'd', 'd' }, { 'e', 'e' }, { 'f', 'f' }, { 'g', 'g' }, { 'h', 'h' }, { 'i', 'i' }, { 'j', 'j' }, { 'k', 'k' }, { 'l', 'l' }, { 'm', 'm' }, { 'n', 'n' }, { 'o', 'o' }, { 'p', 'p' }, { 'q', 'q' }, { 'r', 'r' }, { 's', 's' }, { 't', 't' }, { 'u', 'u' }, { 'v', 'w' }, { 'x', 'x' }, { 'y', 'z' }, { '{', '{' }, { '|', '|' }, { '}', '\U0010ffff' } }
var transitions = []map[int]int {
    { 51: 37, 17: 29, 12: 44, 58: 17, 14: 14, 7: 12, 40: 74, 30: 74, 61: 74, 44: 69, 60: 74, 2: 12, 63: 74, 43: 74, 31: 74, 41: 74, 15: 10, 53: 74, 45: 52, 10: 32, 3: 12, 54: 74, 32: 74, 33: 74, 20: 38, 49: 74, 9: 45, 62: 74, 47: 74, 23: 47, 16: 25, 21: 54, 57: 21, 42: 74, 28: 66, 59: 48, 48: 74, 65: 6, 38: 74, 0: 63, 55: 11, 50: 74, 5: 12, 52: 74, 19: 49, 56: 74, 26: 16, 34: 77, 24: 9, 46: 74 },
    { 45: 74, 38: 74, 50: 74, 46: 74, 61: 74, 33: 74, 58: 74, 56: 74, 62: 74, 57: 74, 41: 74, 52: 74, 32: 74, 43: 74, 51: 74, 60: 74, 47: 74, 59: 74, 40: 74, 48: 74, 54: 74, 31: 74, 53: 74, 44: 74, 49: 74, 22: 74, 55: 65, 30: 74, 42: 74, 63: 74 },
    { 45: 74, 44: 74, 60: 74, 31: 74, 54: 74, 52: 74, 30: 74, 51: 74, 40: 74, 62: 74, 61: 74, 41: 74, 46: 74, 58: 74, 50: 74, 43: 74, 59: 74, 56: 74, 53: 74, 55: 74, 42: 74, 32: 74, 33: 74, 48: 74, 63: 74, 57: 74, 38: 74, 22: 74, 49: 74, 47: 74 },
    { },
    { 50: 74, 31: 74, 32: 74, 40: 74, 58: 74, 52: 74, 33: 74, 30: 74, 38: 74, 22: 74, 42: 74, 59: 74, 53: 74, 48: 74, 45: 74, 62: 74, 57: 74, 44: 74, 49: 74, 47: 74, 51: 74, 63: 74, 54: 74, 60: 74, 55: 74, 61: 74, 56: 74, 46: 74, 41: 74, 43: 74 },
    { 42: 72, 43: 72, 44: 72, 45: 72, 22: 72, 30: 72, 40: 72, 41: 72 },
    { },
    { 40: 39, 41: 39, 42: 39, 43: 39, 44: 39, 45: 39, 22: 39, 30: 39 },
    { 43: 74, 58: 74, 44: 74, 22: 74, 55: 74, 48: 74, 61: 74, 49: 74, 31: 74, 47: 74, 50: 74, 51: 74, 33: 74, 32: 74, 56: 74, 52: 74, 42: 68, 46: 74, 41: 74, 45: 74, 53: 74, 38: 74, 62: 74, 60: 74, 59: 74, 30: 74, 57: 74, 40: 74, 63: 74, 54: 74 },
    { },
    { },
    { 47: 74, 43: 74, 54: 74, 32: 74, 31: 74, 62: 74, 50: 74, 58: 74, 56: 74, 49: 74, 60: 74, 22: 74, 52: 74, 33: 74, 42: 74, 44: 74, 40: 74, 53: 74, 48: 74, 46: 74, 59: 74, 51: 74, 61: 74, 38: 74, 55: 74, 63: 74, 57: 35, 41: 74, 45: 74, 30: 74 },
    { 5: 12, 7: 12, 2: 12, 3: 12 },
    { 32: 74, 44: 74, 50: 74, 22: 74, 56: 74, 45: 74, 57: 74, 60: 74, 63: 74, 61: 74, 43: 74, 38: 74, 58: 74, 46: 74, 55: 74, 51: 74, 48: 1, 53: 74, 30: 74, 33: 74, 52: 74, 49: 74, 31: 74, 62: 74, 42: 74, 59: 74, 40: 74, 41: 74, 54: 74, 47: 74 },
    { },
    { 40: 46, 41: 46, 43: 46, 22: 46, 42: 46, 44: 46, 45: 46, 30: 46 },
    { },
    { 49: 74, 52: 74, 45: 74, 32: 74, 57: 74, 40: 74, 31: 74, 50: 13, 54: 74, 47: 74, 63: 74, 44: 74, 61: 74, 56: 74, 33: 74, 62: 74, 46: 74, 48: 74, 42: 74, 30: 74, 60: 74, 51: 74, 59: 74, 53: 74, 41: 74, 38: 74, 43: 74, 55: 74, 22: 74, 58: 74 },
    { 38: 74, 43: 74, 40: 41, 55: 74, 62: 74, 60: 74, 57: 74, 59: 74, 46: 74, 48: 74, 50: 74, 52: 74, 56: 74, 45: 74, 41: 74, 53: 74, 47: 74, 49: 74, 42: 74, 33: 74, 58: 74, 44: 74, 51: 74, 22: 74, 61: 74, 30: 74, 31: 74, 63: 74, 32: 74, 54: 74 },
    { 1: 45, 50: 45, 12: 45, 17: 45, 63: 45, 38: 45, 56: 45, 10: 45, 65: 45, 40: 45, 29: 45, 47: 45, 23: 45, 24: 45, 21: 45, 58: 45, 4: 45, 13: 45, 34: 45, 36: 45, 15: 45, 52: 45, 7: 45, 55: 45, 11: 45, 22: 45, 14: 45, 39: 45, 66: 45, 53: 45, 27: 45, 46: 45, 35: 45, 42: 45, 62: 46, 54: 45, 9: 45, 8: 45, 59: 45, 43: 45, 28: 45, 64: 45, 19: 45, 18: 45, 57: 45, 25: 45, 33: 45, 41: 45, 60: 58, 2: 45, 61: 45, 45: 45, 26: 45, 32: 7, 37: 45, 51: 45, 30: 45, 31: 45, 48: 45, 44: 45, 49: 45, 16: 45, 20: 45, 6: 45 },
    { 43: 58, 44: 58, 45: 58, 22: 58, 30: 58, 40: 58, 41: 58, 42: 58 },
    { 38: 74, 49: 74, 31: 74, 42: 74, 45: 74, 47: 74, 57: 74, 50: 74, 46: 74, 33: 74, 40: 74, 63: 74, 53: 74, 58: 74, 51: 74, 41: 74, 54: 74, 61: 74, 62: 74, 48: 70, 59: 74, 44: 74, 22: 74, 60: 27, 52: 74, 55: 74, 32: 74, 30: 74, 43: 74, 56: 74 },
    { 30: 31, 41: 31, 44: 31, 45: 31, 40: 31, 42: 31, 43: 31, 22: 31 },
    { 33: 74, 45: 74, 50: 74, 38: 74, 48: 74, 56: 74, 46: 74, 59: 74, 42: 74, 54: 74, 49: 74, 22: 74, 61: 74, 62: 74, 51: 74, 31: 74, 60: 74, 40: 74, 57: 74, 41: 74, 63: 74, 47: 74, 32: 74, 53: 74, 43: 74, 44: 74, 30: 74, 55: 74, 52: 74, 58: 74 },
    { 41: 74, 55: 74, 42: 74, 48: 74, 32: 74, 61: 74, 45: 74, 52: 74, 60: 74, 53: 74, 30: 74, 56: 74, 49: 74, 62: 74, 22: 74, 40: 74, 57: 74, 63: 74, 31: 74, 44: 74, 54: 73, 38: 74, 50: 74, 47: 74, 43: 74, 46: 74, 33: 74, 58: 74, 59: 74, 51: 74 },
    { },
    { 19: 62, 51: 62, 21: 3, 36: 62, 43: 62, 47: 62, 34: 62, 23: 62, 25: 62, 5: 62, 33: 62, 54: 62, 3: 62, 24: 62, 10: 62, 28: 62, 49: 62, 64: 62, 45: 62, 13: 62, 65: 62, 32: 62, 26: 62, 20: 62, 9: 62, 39: 62, 7: 62, 62: 62, 66: 62, 30: 62, 44: 62, 60: 62, 6: 62, 59: 62, 29: 62, 55: 62, 53: 62, 15: 62, 52: 62, 16: 62, 58: 62, 61: 62, 8: 62, 41: 62, 22: 62, 35: 62, 37: 62, 38: 62, 46: 62, 31: 62, 50: 62, 11: 62, 1: 62, 18: 62, 63: 62, 14: 62, 40: 62, 48: 62, 4: 62, 42: 62, 57: 62, 17: 62, 2: 62, 56: 62, 27: 62, 12: 62 },
    { 51: 28, 55: 74, 47: 74, 30: 74, 43: 74, 33: 74, 62: 74, 58: 74, 41: 74, 49: 74, 54: 74, 60: 74, 46: 74, 42: 74, 63: 74, 31: 74, 38: 74, 48: 74, 50: 74, 45: 74, 40: 74, 61: 74, 32: 74, 57: 74, 56: 74, 44: 74, 59: 74, 53: 74, 52: 74, 22: 74 },
    { 55: 74, 63: 74, 52: 74, 56: 74, 60: 74, 45: 74, 40: 74, 48: 74, 41: 74, 57: 74, 43: 74, 42: 74, 46: 74, 31: 74, 47: 74, 58: 74, 54: 74, 62: 74, 30: 74, 33: 74, 44: 34, 59: 74, 49: 74, 38: 74, 22: 74, 53: 74, 51: 74, 61: 74, 32: 74, 50: 74 },
    { },
    { 22: 64, 30: 64, 40: 64, 41: 64, 42: 64, 43: 64, 44: 64, 45: 64 },
    { 43: 5, 22: 5, 30: 5, 40: 5, 42: 5, 44: 5, 45: 5, 41: 5 },
    { },
    { 59: 74, 49: 74, 55: 74, 51: 74, 48: 74, 57: 74, 45: 74, 44: 74, 53: 74, 46: 74, 63: 74, 32: 74, 41: 74, 22: 74, 52: 74, 42: 74, 61: 74, 38: 74, 56: 74, 33: 74, 62: 74, 50: 74, 54: 74, 31: 74, 47: 42, 43: 74, 40: 74, 58: 74, 30: 74, 60: 74 },
    { 30: 74, 63: 74, 59: 74, 49: 74, 55: 74, 22: 74, 61: 74, 62: 74, 46: 74, 51: 74, 60: 74, 40: 74, 48: 74, 42: 74, 50: 74, 32: 74, 38: 74, 57: 74, 52: 74, 56: 74, 43: 74, 47: 74, 41: 74, 58: 74, 44: 74, 31: 74, 33: 74, 54: 74, 53: 74, 45: 74 },
    { 54: 74, 40: 74, 38: 74, 47: 74, 51: 74, 60: 74, 55: 74, 33: 74, 56: 74, 30: 74, 58: 74, 31: 74, 62: 74, 32: 74, 41: 74, 59: 74, 52: 74, 63: 74, 61: 74, 53: 74, 44: 8, 48: 74, 22: 74, 49: 74, 45: 74, 46: 74, 57: 74, 42: 74, 43: 74, 50: 74 },
    { },
    { 44: 71, 41: 74, 62: 74, 63: 74, 32: 74, 48: 74, 31: 74, 40: 74, 30: 74, 49: 74, 61: 74, 22: 74, 56: 74, 59: 74, 43: 74, 60: 74, 50: 74, 33: 74, 57: 74, 51: 74, 42: 74, 53: 74, 52: 74, 38: 74, 55: 74, 54: 74, 47: 74, 45: 74, 46: 74, 58: 74 },
    { },
    { 44: 59, 45: 59, 22: 59, 30: 59, 40: 59, 41: 59, 42: 59, 43: 59 },
    { 49: 74, 33: 74, 30: 74, 62: 74, 50: 43, 40: 74, 44: 74, 46: 74, 38: 74, 45: 74, 60: 74, 51: 74, 61: 74, 58: 74, 32: 74, 59: 74, 41: 74, 57: 74, 22: 74, 48: 74, 54: 74, 42: 74, 52: 74, 47: 74, 31: 74, 55: 74, 56: 74, 43: 74, 53: 74, 63: 74 },
    { 32: 74, 42: 74, 55: 74, 50: 74, 51: 74, 58: 74, 30: 74, 40: 74, 44: 74, 62: 74, 38: 74, 22: 74, 59: 74, 57: 74, 60: 74, 49: 74, 48: 74, 63: 74, 53: 74, 54: 74, 31: 74, 52: 74, 47: 74, 56: 74, 33: 74, 61: 74, 45: 74, 46: 75, 43: 74, 41: 74 },
    { 40: 74, 58: 74, 38: 74, 61: 74, 56: 74, 44: 74, 43: 74, 31: 74, 47: 74, 30: 74, 49: 74, 50: 74, 62: 74, 54: 74, 42: 74, 55: 74, 57: 74, 48: 74, 46: 74, 33: 74, 41: 74, 53: 74, 51: 74, 59: 76, 22: 74, 45: 74, 32: 74, 52: 74, 63: 74, 60: 74 },
    { 57: 74, 51: 74, 31: 74, 60: 74, 63: 74, 33: 74, 62: 74, 22: 74, 52: 74, 40: 74, 54: 74, 58: 74, 50: 74, 49: 74, 53: 74, 42: 74, 41: 74, 48: 74, 44: 67, 47: 74, 55: 74, 45: 74, 38: 74, 30: 74, 46: 74, 59: 74, 56: 74, 32: 74, 61: 74, 43: 74 },
    { },
    { 45: 45, 53: 45, 33: 45, 27: 45, 24: 45, 46: 45, 13: 45, 60: 45, 50: 45, 10: 45, 6: 45, 38: 45, 64: 45, 16: 45, 12: 45, 17: 45, 7: 45, 28: 45, 1: 45, 8: 45, 22: 45, 18: 45, 23: 45, 9: 60, 63: 45, 29: 45, 41: 45, 19: 45, 20: 45, 21: 45, 43: 45, 35: 19, 49: 45, 56: 45, 44: 45, 54: 45, 65: 45, 48: 45, 58: 45, 62: 45, 47: 45, 32: 45, 4: 45, 11: 45, 66: 45, 55: 45, 52: 45, 51: 45, 42: 45, 59: 45, 2: 45, 57: 45, 26: 45, 34: 45, 40: 45, 31: 45, 39: 45, 30: 45, 15: 45, 25: 45, 61: 45, 36: 45, 14: 45, 37: 45 },
    { 43: 53, 44: 53, 30: 53, 40: 53, 41: 53, 45: 53, 22: 53, 42: 53 },
    { },
    { 38: 74, 49: 74, 54: 40, 40: 74, 45: 74, 47: 74, 48: 74, 44: 74, 62: 74, 31: 74, 57: 74, 63: 74, 50: 74, 32: 74, 46: 74, 61: 74, 51: 74, 55: 74, 41: 74, 43: 74, 60: 74, 42: 74, 59: 74, 22: 74, 58: 74, 53: 74, 56: 74, 30: 74, 52: 74, 33: 74 },
    { 27: 50 },
    { },
    { 45: 74, 33: 74, 61: 74, 57: 24, 31: 74, 43: 74, 58: 74, 46: 74, 41: 74, 53: 74, 50: 74, 60: 74, 63: 74, 56: 74, 40: 74, 22: 74, 30: 74, 49: 74, 51: 74, 59: 74, 55: 74, 52: 74, 38: 74, 47: 74, 44: 74, 54: 74, 62: 74, 48: 74, 42: 74, 32: 74 },
    { 46: 74, 43: 74, 31: 74, 47: 74, 54: 74, 56: 74, 40: 74, 63: 74, 32: 74, 55: 74, 41: 74, 44: 74, 38: 74, 33: 74, 52: 74, 53: 74, 62: 74, 51: 74, 59: 74, 45: 74, 60: 74, 61: 74, 48: 74, 42: 74, 22: 74, 30: 74, 58: 74, 57: 18, 50: 74, 49: 74 },
    { 45: 45, 30: 45, 41: 45, 42: 45, 43: 45, 44: 45, 22: 45, 40: 45 },
    { 21: 61, 16: 62 },
    { 30: 30, 40: 30, 41: 30, 42: 30, 43: 30, 44: 30, 45: 30, 22: 30 },
    { 30: 77, 42: 77, 45: 77, 40: 77, 41: 77, 43: 77, 44: 77, 22: 77 },
    { 53: 74, 55: 74, 59: 23, 32: 74, 48: 74, 54: 74, 58: 74, 46: 74, 50: 74, 43: 74, 60: 74, 22: 74, 33: 74, 40: 74, 57: 74, 42: 74, 61: 74, 38: 74, 63: 74, 49: 74, 56: 74, 51: 74, 41: 74, 52: 74, 44: 74, 47: 74, 31: 74, 30: 74, 62: 74, 45: 74 },
    { 30: 15, 40: 15, 41: 15, 42: 15, 43: 15, 44: 15, 45: 15, 22: 15 },
    { 22: 20, 30: 20, 40: 20, 41: 20, 42: 20, 43: 20, 44: 20, 45: 20 },
    { },
    { 56: 61, 64: 61, 62: 61, 5: 3, 18: 61, 34: 61, 16: 61, 36: 61, 41: 61, 8: 61, 57: 61, 40: 61, 24: 61, 2: 61, 26: 61, 20: 61, 10: 61, 65: 61, 43: 61, 37: 61, 17: 61, 12: 61, 4: 61, 7: 61, 54: 61, 49: 61, 47: 61, 3: 3, 58: 61, 19: 61, 55: 61, 28: 61, 1: 61, 31: 61, 33: 61, 48: 61, 52: 61, 50: 61, 46: 61, 66: 61, 13: 61, 35: 61, 53: 61, 23: 61, 0: 3, 61: 61, 45: 61, 59: 61, 42: 61, 25: 61, 32: 61, 30: 61, 63: 61, 11: 61, 6: 61, 29: 61, 9: 61, 22: 61, 14: 61, 15: 61, 51: 61, 38: 61, 27: 61, 39: 61, 21: 61, 60: 61, 44: 61 },
    { 25: 62, 6: 62, 42: 62, 23: 62, 64: 62, 36: 62, 61: 62, 24: 62, 26: 62, 15: 62, 40: 62, 55: 62, 9: 62, 52: 62, 38: 62, 58: 62, 8: 62, 30: 62, 20: 62, 39: 62, 50: 62, 54: 62, 11: 62, 10: 62, 59: 62, 1: 62, 65: 62, 7: 62, 44: 62, 35: 62, 2: 62, 4: 62, 43: 62, 56: 62, 21: 62, 37: 62, 22: 62, 3: 62, 49: 62, 31: 62, 60: 62, 14: 62, 63: 62, 57: 62, 62: 62, 16: 26, 34: 62, 12: 62, 18: 62, 32: 62, 13: 62, 17: 62, 41: 62, 47: 62, 19: 62, 46: 62, 45: 62, 5: 62, 51: 62, 33: 62, 66: 62, 48: 62, 53: 62, 28: 62, 27: 62, 29: 62 },
    { },
    { 43: 22, 44: 22, 45: 22, 22: 22, 30: 22, 40: 22, 41: 22, 42: 22 },
    { 54: 74, 33: 74, 43: 74, 46: 74, 50: 74, 51: 74, 47: 74, 44: 74, 60: 74, 42: 74, 56: 74, 62: 74, 59: 74, 40: 74, 48: 74, 55: 74, 52: 74, 58: 74, 53: 74, 22: 74, 38: 74, 32: 74, 45: 74, 30: 74, 63: 74, 31: 74, 57: 74, 49: 74, 61: 74, 41: 74 },
    { },
    { 49: 74, 54: 74, 59: 74, 32: 74, 62: 74, 53: 4, 41: 74, 51: 74, 30: 74, 43: 74, 45: 74, 40: 74, 60: 74, 38: 74, 50: 74, 63: 74, 55: 74, 61: 74, 56: 74, 47: 74, 48: 74, 58: 74, 31: 74, 52: 74, 57: 74, 44: 74, 46: 74, 33: 74, 42: 74, 22: 74 },
    { 60: 74, 61: 74, 47: 74, 56: 74, 42: 74, 33: 74, 43: 74, 48: 74, 57: 74, 38: 74, 58: 74, 32: 74, 30: 74, 55: 74, 45: 74, 53: 74, 49: 74, 59: 74, 63: 74, 51: 74, 52: 74, 40: 74, 31: 74, 44: 74, 22: 74, 54: 74, 62: 74, 50: 74, 46: 74, 41: 74 },
    { 22: 74, 49: 74, 45: 74, 51: 74, 47: 74, 44: 74, 62: 74, 54: 74, 32: 74, 50: 74, 53: 74, 52: 74, 42: 74, 63: 74, 56: 74, 57: 51, 40: 74, 33: 74, 48: 74, 31: 74, 38: 74, 55: 74, 43: 74, 59: 74, 60: 74, 46: 74, 41: 74, 61: 74, 58: 74, 30: 74 },
    { 32: 74, 62: 74, 50: 74, 59: 74, 47: 74, 40: 74, 31: 74, 48: 74, 52: 74, 58: 74, 60: 74, 46: 33, 56: 74, 57: 74, 22: 74, 30: 74, 42: 74, 41: 74, 43: 74, 53: 74, 51: 74, 61: 74, 44: 74, 54: 74, 55: 74, 38: 74, 49: 74, 33: 74, 45: 74, 63: 74 },
    { 40: 74, 51: 74, 54: 74, 32: 74, 38: 74, 53: 74, 57: 74, 46: 74, 63: 74, 59: 74, 47: 74, 50: 74, 48: 74, 31: 74, 58: 74, 45: 57, 30: 74, 41: 74, 56: 74, 33: 74, 43: 74, 49: 74, 60: 74, 55: 74, 22: 74, 42: 74, 44: 74, 52: 74, 62: 74, 61: 74 },
    { 40: 56, 45: 56, 41: 56, 42: 56, 43: 56, 44: 56, 22: 56, 30: 56 },
    { 42: 74, 38: 74, 57: 2, 33: 74, 59: 74, 56: 74, 45: 74, 58: 74, 55: 74, 51: 74, 63: 74, 40: 74, 54: 74, 32: 74, 48: 74, 62: 74, 52: 74, 43: 74, 22: 74, 30: 74, 49: 74, 50: 74, 46: 74, 61: 74, 31: 74, 53: 74, 47: 74, 44: 74, 41: 74, 60: 74 },
    { 52: 74, 47: 74, 41: 74, 31: 74, 33: 74, 22: 74, 53: 74, 63: 74, 45: 74, 50: 74, 49: 74, 56: 74, 62: 74, 42: 74, 51: 74, 59: 74, 57: 74, 58: 74, 46: 74, 40: 74, 30: 74, 32: 74, 44: 74, 48: 74, 60: 74, 38: 74, 61: 74, 54: 74, 43: 74, 55: 74 },
    { 49: 74, 31: 74, 50: 74, 33: 74, 45: 74, 56: 74, 57: 74, 52: 74, 42: 74, 43: 74, 30: 74, 44: 74, 38: 74, 53: 74, 48: 74, 46: 74, 61: 74, 32: 74, 40: 74, 41: 74, 55: 74, 51: 74, 63: 74, 59: 74, 54: 74, 62: 74, 22: 74, 58: 74, 47: 74, 60: 74 },
    { 60: 74, 55: 74, 52: 74, 61: 74, 45: 74, 50: 74, 22: 74, 38: 74, 47: 74, 59: 74, 33: 74, 51: 74, 42: 74, 57: 74, 56: 74, 46: 74, 63: 74, 62: 74, 32: 74, 54: 74, 58: 74, 49: 74, 48: 74, 43: 74, 44: 74, 41: 74, 30: 74, 53: 74, 40: 74, 31: 74 },
    { 22: 77, 21: 77, 47: 77, 53: 77, 48: 77, 46: 77, 19: 77, 15: 77, 40: 77, 33: 77, 30: 77, 58: 77, 44: 77, 10: 77, 38: 77, 29: 77, 8: 77, 57: 77, 28: 77, 9: 77, 42: 77, 41: 77, 65: 77, 23: 77, 24: 77, 25: 77, 7: 77, 39: 77, 49: 77, 37: 77, 55: 77, 51: 77, 27: 77, 17: 77, 11: 77, 59: 77, 56: 77, 13: 77, 26: 77, 45: 77, 43: 77, 50: 77, 14: 77, 12: 77, 20: 77, 31: 77, 66: 77, 36: 36, 62: 77, 61: 77, 64: 77, 52: 77, 4: 77, 60: 77, 18: 77, 63: 77, 34: 77, 35: 78, 16: 77, 54: 77, 32: 77, 2: 77, 6: 77, 1: 77 },
    { 16: 77, 22: 77, 21: 77, 55: 77, 23: 77, 41: 77, 65: 77, 4: 77, 45: 77, 39: 77, 31: 77, 60: 31, 24: 77, 29: 77, 9: 77, 62: 72, 34: 77, 61: 77, 46: 77, 42: 77, 14: 77, 35: 77, 53: 77, 50: 77, 57: 77, 52: 77, 37: 77, 66: 77, 49: 77, 11: 77, 19: 77, 51: 77, 7: 77, 20: 77, 15: 77, 40: 77, 26: 77, 2: 77, 6: 77, 18: 77, 59: 77, 54: 77, 32: 55, 58: 77, 63: 77, 47: 77, 10: 77, 56: 77, 44: 77, 38: 77, 25: 77, 64: 77, 28: 77, 27: 77, 8: 77, 36: 77, 12: 77, 30: 77, 43: 77, 17: 77, 48: 77, 33: 77, 1: 77, 13: 77 },
}
var accept = map[int]TokenType { 75: 5, 37: 23, 1: 23, 2: 8, 3: 1, 9: 18, 35: 23, 42: 23, 67: 23, 4: 4, 12: 0, 17: 23, 18: 23, 21: 23, 25: 12, 27: 23, 28: 23, 6: 15, 8: 23, 24: 23, 36: 25, 33: 23, 41: 23, 44: 17, 51: 23, 13: 23, 43: 23, 47: 19, 50: 22, 68: 3, 74: 23, 76: 7, 14: 20, 48: 23, 66: 13, 71: 23, 10: 21, 11: 23, 23: 6, 34: 2, 57: 23, 16: 10, 32: 16, 38: 14, 40: 23, 52: 23, 60: 24, 63: 26, 70: 23, 29: 11, 65: 9, 69: 23, 73: 23 }

// Base lexer interface.
type BaseLexer interface { Next() Token }
// Lexer struct. Produces token stream.
type Lexer struct {
    stream  *InputStream
    handler LexerErrorHandler
}

// Input stream struct. Produces character stream.
type InputStream struct {
    reader        *bufio.Reader
    location      Location
    buffer, stack []streamData
}
type streamData struct { char rune; location Location }

// Function called when the lexer encounters an error. Expected to bring input stream to synchronization point.
type LexerErrorHandler func (stream *InputStream, char rune, location Location)
var DEFAULT_LEXER_HANDLER = func (stream *InputStream, char rune, location Location) {
    // Format special characters
    var str string
    switch char {
    case ' ':        str = "space"
    case '\t':       str = "tab"
    case '\n', '\r': str = "new line"
    case 0:          str = "end of file"
    default:         str = fmt.Sprintf("character %q", string(char))
    }
    // Print formatted error message given an unexpected character
    fmt.Fprintf(os.Stderr, "Syntax error: Unexpected %s - %d:%d\n", str, location.Line, location.Col)
    // Find synchronization point
    var whitespace = []rune { 0, ' ', '\t', '\n', '\r' }
    for {
        if char := stream.next(); slices.Contains(whitespace, char) { break }
    }
}

// Returns new lexer struct. Initializes lexer with initial token.
func NewLexer(reader *bufio.Reader, handler LexerErrorHandler) *Lexer {
    stream := &InputStream { reader, Location { 1, 1 }, make([]streamData, 0), make([]streamData, 0) }
    lexer := &Lexer { stream, handler }
    return lexer
}

// Emits next token in stream.
func (l *Lexer) Next() Token {
    start := l.stream.location
    input, stack := make([]rune, 0), make([]int, 0)
    i, state := 0, 0
    var char rune
    for {
        // Read current character in stream and add to input
        char = l.stream.Read()
        input = append(input, char)
        next, ok := transitions[state][searchRange(char)]
        // Exit loop if we cannot transition from this state on the character
        if !ok { l.stream.Unread(); break }
        // Store the visited states since the last occurring accepting state
        if _, ok := accept[state]; ok { stack = stack[:0] }
        stack = append(stack, state)
        state = next
        i++
    }
    // Backtrack to last accepting state
    location := l.stream.location
    var token TokenType
    for {
        // Unread current character
        if t, ok := accept[state]; ok { token = t; break }
        if len(stack) == 0 {
            // If no accepting state was encountered, raise error and synchronize
            l.stream.synchronize(l.handler, char, location)
            return l.Next() // Attempt to read token again
        }
        // Restore previously visited states
        state, stack = stack[len(stack) - 1], stack[:len(stack) - 1]
        l.stream.Unread()
        i--
    }
    end := l.stream.stack[len(l.stream.stack) - 1].location
    l.stream.reset()
    if _, ok := skip[token]; ok { return l.Next() } // Skip token
    // Create token struct
    return Token { token, string(input[:i]), start, end }
}

// Returns the next character in the input stream while maintaining location.
func (i *InputStream) Read() rune {
    // Store previous location in stack and read next character
    l := i.location; char := i.next()
    i.stack = append(i.stack, streamData { char, l })
    return char
}

func (i *InputStream) next() rune {
    // If buffered data exists, consume it before requesting new data from the reader
    if len(i.buffer) > 0 {
        data := i.buffer[len(i.buffer) - 1]; i.buffer = i.buffer[:len(i.buffer) - 1]
        i.location = data.location
        return data.char
    }
    char, _, err := i.reader.ReadRune()
    if err != nil { return 0 } // Return a null character if stream does not have any more characters to emit
    // Update current location based on character read
    l := &i.location
    switch char {
    case '\n': l.Line++; l.Col = 1
    case '\t': l.Col += 5 - l.Col % 4
    default: l.Col++
    }
    return char
}

// Unreads the current character in the input stream while maintaining location.
func (i *InputStream) Unread() {
    if len(i.stack) == 0 { return }
    data := i.stack[len(i.stack) - 1]; i.stack = i.stack[:len(i.stack) - 1]
    l := i.location; i.location = data.location
    i.buffer = append(i.buffer, streamData { data.char, l })
}

// Releases previously read characters.
func (i *InputStream) reset() { i.stack = i.stack[:0] }
func (i *InputStream) synchronize(handler LexerErrorHandler, char rune, location Location) {
    handler(i, char, location)
    i.reset()
}

// Run binary search on character to find index associated with the range that contains the character.
func searchRange(char rune) int {
    low, high := 0, len(ranges) - 1
    for low <= high {
        mid := (low + high) / 2
        r := ranges[mid]
        if char >= r.Min && char <= r.Max { return mid }
        if char > r.Max {
            low = mid + 1
        } else {
            high = mid - 1
        }
    }
    return -1
}

// FOR DEBUG PURPOSES:
// Consumes all tokens emitted by lexer and prints them to the standard output.
func (l *Lexer) PrintTokens() {
    for {
        token := l.Next()
        location := fmt.Sprintf("%d:%d-%d:%d", token.Start.Line, token.Start.Col, token.End.Line, token.End.Col)
        fmt.Printf("%-16s | %-16s %-16s\n", location, token.Type, token.Value)
        if token.Type == EOF { break }
    }
}
