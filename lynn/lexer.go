package lynn

import (
	"bufio"
	"fmt"
	"slices"
)

// Represents type of token as an enumerated integer.
type TokenType uint
// Location struct. Holds line and column of token.
type Location struct { Line, Col int }
// Token struct. Holds type, value, and location of token.
type Token struct {
    Type       TokenType
    Value      string
    Start, End Location
}

// Represents a range between characters.
type Range struct { Min, Max rune }

const (WHITESPACE TokenType = iota; COMMENT; RULE; PRECEDENCE; TOKEN; FRAGMENT; LEFT; RIGHT; ERROR; SKIP; EQUAL; PLUS; STAR; QUESTION; DOT; BAR; HASH; PERCENT; SEMI; COLON; L_PAREN; R_PAREN; ARROW; IDENTIFIER; STRING; CLASS; EOF)
func (t TokenType) String() string { return typeName[t] }
var typeName = map[TokenType]string { 0: "WHITESPACE", 1: "COMMENT", 2: "RULE", 3: "PRECEDENCE", 4: "TOKEN", 5: "FRAGMENT", 6: "LEFT", 7: "RIGHT", 8: "ERROR", 9: "SKIP", 10: "EQUAL", 11: "PLUS", 12: "STAR", 13: "QUESTION", 14: "DOT", 15: "BAR", 16: "HASH", 17: "PERCENT", 18: "SEMI", 19: "COLON", 20: "L_PAREN", 21: "R_PAREN", 22: "ARROW", 23: "IDENTIFIER", 24: "STRING", 25: "CLASS", 26: "EOF" }
var skip = map[TokenType]struct{} { 0: {}, 1: {} }

var ranges = []Range { { '\x00', '\x00' }, { '\x01', '\b' }, { '\t', '\t' }, { '\n', '\n' }, { '\v', '\f' }, { '\r', '\r' }, { '\x0e', '\x1f' }, { ' ', ' ' }, { '!', '!' }, { '"', '"' }, { '#', '#' }, { '$', '$' }, { '%', '%' }, { '&', '\'' }, { '(', '(' }, { ')', ')' }, { '*', '*' }, { '+', '+' }, { ',', ',' }, { '-', '-' }, { '.', '.' }, { '/', '/' }, { '0', '9' }, { ':', ':' }, { ';', ';' }, { '<', '<' }, { '=', '=' }, { '>', '>' }, { '?', '?' }, { '@', '@' }, { 'A', 'Z' }, { '[', '[' }, { '\\', '\\' }, { ']', ']' }, { '^', '^' }, { '_', '_' }, { '`', '`' }, { 'a', 'a' }, { 'b', 'b' }, { 'c', 'c' }, { 'd', 'd' }, { 'e', 'e' }, { 'f', 'f' }, { 'g', 'g' }, { 'h', 'h' }, { 'i', 'i' }, { 'j', 'j' }, { 'k', 'k' }, { 'l', 'l' }, { 'm', 'm' }, { 'n', 'n' }, { 'o', 'o' }, { 'p', 'p' }, { 'q', 'q' }, { 'r', 'r' }, { 's', 's' }, { 't', 't' }, { 'u', 'u' }, { 'v', 'z' }, { '{', '{' }, { '|', '|' }, { '}', '\U0010ffff' } }
var transitions = []map[int]int {
    { 55: 9, 21: 27, 54: 61, 58: 42, 52: 13, 14: 8, 3: 34, 42: 16, 7: 34, 41: 17, 30: 42, 17: 40, 31: 37, 0: 47, 35: 42, 2: 34, 43: 42, 45: 42, 38: 42, 19: 4, 20: 5, 23: 49, 24: 28, 16: 20, 28: 35, 15: 24, 44: 42, 60: 38, 10: 41, 46: 42, 12: 39, 48: 6, 47: 42, 26: 22, 37: 42, 39: 42, 56: 30, 57: 42, 9: 59, 5: 34, 50: 42, 53: 42, 51: 42, 49: 42, 40: 42 },
    { 53: 42, 48: 42, 49: 42, 58: 42, 40: 42, 46: 42, 41: 42, 55: 42, 52: 42, 43: 42, 35: 42, 50: 42, 37: 42, 57: 42, 39: 42, 30: 42, 51: 42, 45: 42, 54: 42, 38: 42, 42: 42, 56: 42, 47: 42, 22: 42, 44: 42 },
    { 41: 42, 51: 42, 37: 46, 50: 42, 56: 42, 57: 42, 47: 42, 58: 42, 22: 42, 39: 42, 49: 42, 35: 42, 42: 42, 54: 42, 38: 42, 48: 42, 40: 42, 53: 42, 30: 42, 52: 42, 43: 42, 55: 42, 44: 42, 46: 42, 45: 42 },
    { 38: 42, 49: 42, 55: 42, 37: 42, 45: 42, 50: 42, 44: 42, 40: 42, 35: 42, 39: 42, 57: 42, 41: 42, 42: 42, 52: 42, 56: 42, 58: 42, 53: 42, 48: 42, 46: 42, 54: 42, 43: 42, 47: 42, 51: 62, 30: 42, 22: 42 },
    { 27: 48 },
    { },
    { 56: 42, 49: 42, 44: 42, 51: 42, 46: 42, 40: 42, 35: 42, 47: 42, 50: 42, 53: 42, 43: 42, 55: 42, 58: 42, 54: 42, 52: 42, 41: 29, 57: 42, 37: 42, 30: 42, 39: 42, 48: 42, 38: 42, 45: 42, 22: 42, 42: 42 },
    { 35: 42, 54: 42, 47: 42, 30: 42, 45: 42, 41: 54, 48: 42, 57: 42, 37: 42, 52: 42, 58: 42, 46: 42, 53: 42, 42: 42, 55: 42, 39: 42, 22: 42, 38: 42, 40: 42, 51: 42, 44: 42, 49: 42, 50: 42, 43: 42, 56: 42 },
    { },
    { 45: 42, 44: 42, 49: 42, 42: 42, 58: 42, 46: 42, 35: 42, 47: 10, 57: 42, 51: 42, 48: 42, 54: 42, 53: 42, 30: 42, 22: 42, 41: 42, 50: 42, 38: 42, 39: 42, 43: 42, 56: 42, 55: 42, 52: 42, 37: 42, 40: 42 },
    { 52: 42, 47: 42, 35: 42, 44: 42, 55: 42, 58: 42, 51: 42, 43: 42, 56: 42, 50: 42, 37: 42, 45: 32, 38: 42, 49: 42, 54: 42, 42: 42, 22: 42, 48: 42, 41: 42, 39: 42, 46: 42, 57: 42, 53: 42, 40: 42, 30: 42 },
    { 44: 42, 40: 42, 35: 42, 52: 42, 45: 42, 38: 42, 43: 42, 46: 42, 51: 42, 37: 42, 58: 42, 54: 42, 41: 42, 47: 42, 49: 42, 56: 1, 55: 42, 48: 42, 39: 42, 22: 42, 57: 42, 50: 42, 30: 42, 42: 42, 53: 42 },
    { 22: 42, 49: 42, 52: 42, 30: 42, 43: 42, 47: 14, 42: 42, 48: 42, 40: 42, 45: 42, 55: 42, 35: 42, 38: 42, 53: 42, 39: 42, 37: 42, 41: 42, 50: 42, 44: 42, 58: 42, 46: 42, 56: 42, 51: 42, 54: 42, 57: 42 },
    { 54: 7, 39: 42, 50: 42, 38: 42, 42: 42, 49: 42, 55: 42, 44: 42, 37: 42, 57: 42, 35: 42, 52: 42, 56: 42, 58: 42, 46: 42, 30: 42, 40: 42, 47: 42, 22: 42, 41: 42, 51: 42, 48: 42, 53: 42, 45: 42, 43: 42 },
    { 49: 42, 41: 51, 44: 42, 35: 42, 53: 42, 45: 42, 46: 42, 52: 42, 54: 42, 39: 42, 37: 42, 47: 42, 51: 42, 22: 42, 43: 42, 56: 42, 58: 42, 57: 42, 55: 42, 42: 42, 40: 42, 30: 42, 50: 42, 38: 42, 48: 42 },
    { 45: 15, 24: 15, 15: 15, 25: 15, 46: 15, 55: 15, 47: 15, 57: 15, 12: 15, 34: 15, 58: 15, 42: 15, 16: 15, 60: 15, 54: 15, 51: 15, 18: 15, 36: 15, 50: 15, 22: 15, 30: 15, 43: 15, 1: 15, 21: 15, 8: 15, 19: 15, 10: 15, 41: 15, 33: 15, 32: 15, 3: 43, 0: 43, 38: 15, 56: 15, 5: 43, 28: 15, 61: 15, 27: 15, 52: 15, 31: 15, 29: 15, 14: 15, 20: 15, 48: 15, 23: 15, 40: 15, 2: 15, 9: 15, 26: 15, 53: 15, 6: 15, 11: 15, 13: 15, 59: 15, 39: 15, 17: 15, 37: 15, 44: 15, 35: 15, 7: 15, 49: 15, 4: 15 },
    { 49: 42, 57: 42, 46: 42, 35: 42, 39: 42, 43: 42, 37: 42, 42: 42, 30: 42, 40: 42, 22: 42, 50: 42, 53: 42, 45: 42, 58: 42, 38: 42, 55: 42, 56: 42, 54: 2, 44: 42, 41: 42, 47: 42, 51: 42, 48: 42, 52: 42 },
    { 38: 42, 39: 42, 40: 42, 45: 42, 30: 42, 22: 42, 46: 42, 51: 42, 48: 42, 57: 42, 54: 36, 43: 42, 49: 42, 56: 42, 50: 42, 41: 42, 53: 42, 55: 42, 37: 42, 35: 42, 44: 42, 42: 42, 52: 42, 58: 42, 47: 42 },
    { 50: 42, 53: 42, 57: 42, 55: 42, 51: 42, 58: 42, 30: 42, 45: 42, 44: 42, 38: 42, 22: 42, 35: 42, 52: 42, 41: 42, 47: 42, 54: 42, 46: 42, 39: 42, 42: 42, 37: 42, 56: 42, 43: 42, 48: 42, 49: 42, 40: 42 },
    { 21: 37, 43: 37, 8: 37, 36: 37, 46: 37, 44: 37, 25: 37, 16: 37, 39: 37, 41: 37, 4: 37, 30: 37, 28: 37, 47: 37, 27: 37, 20: 37, 9: 37, 33: 37, 53: 37, 13: 37, 17: 37, 1: 37, 6: 37, 12: 37, 45: 37, 59: 37, 34: 37, 7: 37, 50: 37, 35: 37, 11: 37, 19: 37, 49: 37, 14: 37, 38: 37, 2: 37, 48: 37, 26: 37, 56: 37, 37: 37, 23: 37, 60: 37, 51: 37, 42: 37, 40: 37, 15: 37, 18: 37, 58: 37, 24: 37, 29: 37, 55: 37, 52: 37, 31: 37, 61: 37, 22: 37, 32: 37, 10: 37, 54: 37, 57: 37 },
    { },
    { 46: 42, 35: 42, 43: 42, 37: 42, 41: 42, 22: 42, 40: 42, 45: 42, 30: 42, 48: 42, 56: 50, 54: 42, 55: 42, 49: 42, 38: 42, 58: 42, 57: 42, 51: 42, 39: 42, 44: 42, 53: 42, 52: 42, 47: 42, 50: 42, 42: 42 },
    { },
    { 50: 42, 57: 42, 56: 42, 55: 42, 45: 42, 47: 42, 46: 42, 39: 42, 48: 42, 42: 42, 40: 42, 44: 42, 22: 42, 52: 42, 37: 42, 35: 42, 41: 42, 51: 42, 53: 42, 43: 42, 49: 42, 58: 42, 54: 42, 30: 42, 38: 42 },
    { },
    { 24: 59, 49: 59, 12: 59, 61: 59, 26: 59, 2: 59, 44: 59, 28: 59, 14: 59, 36: 59, 38: 59, 11: 59, 6: 59, 54: 59, 21: 59, 4: 59, 52: 59, 13: 59, 9: 59, 1: 59, 41: 59, 59: 59, 7: 59, 56: 59, 29: 59, 37: 59, 25: 59, 40: 59, 22: 59, 57: 59, 55: 59, 17: 59, 15: 59, 18: 59, 43: 59, 16: 59, 31: 59, 42: 59, 34: 59, 33: 59, 20: 59, 8: 59, 27: 59, 23: 59, 30: 59, 35: 59, 50: 59, 19: 59, 60: 59, 39: 59, 53: 59, 32: 59, 10: 59, 51: 59, 45: 59, 46: 59, 47: 59, 48: 59, 58: 59 },
    { 43: 42, 53: 42, 46: 42, 58: 42, 42: 42, 45: 42, 41: 42, 30: 42, 38: 42, 49: 42, 39: 42, 44: 42, 47: 42, 55: 42, 51: 42, 37: 42, 50: 42, 48: 42, 57: 42, 35: 42, 40: 42, 52: 42, 54: 42, 22: 42, 56: 42 },
    { 16: 57, 21: 15 },
    { },
    { 44: 42, 35: 42, 54: 42, 50: 42, 47: 42, 30: 42, 55: 42, 42: 21, 22: 42, 45: 42, 56: 42, 46: 42, 40: 42, 37: 42, 58: 42, 41: 42, 51: 42, 38: 42, 49: 42, 57: 42, 43: 42, 48: 42, 53: 42, 52: 42, 39: 42 },
    { 54: 42, 38: 42, 49: 42, 41: 42, 47: 42, 39: 42, 48: 42, 46: 42, 22: 42, 42: 42, 53: 42, 55: 42, 40: 42, 57: 42, 35: 42, 30: 42, 43: 42, 37: 42, 56: 42, 45: 42, 50: 42, 44: 42, 52: 42, 58: 42, 51: 12 },
    { },
    { 22: 42, 35: 42, 51: 42, 30: 42, 42: 42, 39: 42, 52: 56, 53: 42, 47: 42, 45: 42, 40: 42, 41: 42, 44: 42, 49: 42, 56: 42, 58: 42, 46: 42, 48: 42, 57: 42, 43: 42, 55: 42, 54: 42, 50: 42, 38: 42, 37: 42 },
    { 58: 42, 41: 42, 43: 42, 40: 42, 55: 42, 39: 42, 22: 42, 37: 42, 56: 42, 51: 42, 46: 42, 44: 42, 48: 44, 53: 42, 52: 42, 35: 42, 49: 42, 50: 42, 54: 42, 57: 42, 47: 42, 30: 42, 38: 42, 42: 42, 45: 42 },
    { 7: 34, 2: 34, 3: 34, 5: 34 },
    { },
    { 30: 42, 39: 42, 48: 42, 51: 42, 44: 42, 53: 42, 40: 42, 38: 42, 42: 42, 45: 42, 35: 42, 50: 42, 52: 42, 37: 42, 58: 42, 46: 42, 22: 42, 47: 42, 49: 42, 57: 42, 41: 42, 43: 42, 54: 3, 56: 42, 55: 42 },
    { 45: 37, 6: 37, 9: 37, 49: 37, 29: 37, 24: 37, 43: 37, 26: 37, 55: 37, 37: 37, 36: 37, 58: 37, 11: 37, 25: 37, 28: 37, 52: 37, 32: 19, 12: 37, 59: 37, 10: 37, 40: 37, 35: 37, 27: 37, 2: 37, 39: 37, 54: 37, 7: 37, 33: 55, 53: 37, 1: 37, 30: 37, 22: 37, 48: 37, 47: 37, 44: 37, 14: 37, 20: 37, 17: 37, 42: 37, 23: 37, 61: 37, 34: 37, 51: 37, 15: 37, 16: 37, 60: 37, 13: 37, 21: 37, 18: 37, 19: 37, 8: 37, 56: 37, 4: 37, 41: 37, 57: 37, 50: 37, 31: 37, 46: 37, 38: 37 },
    { },
    { },
    { },
    { },
    { 40: 42, 22: 42, 30: 42, 39: 42, 43: 42, 56: 42, 46: 42, 38: 42, 37: 42, 48: 42, 41: 42, 57: 42, 42: 42, 35: 42, 51: 42, 45: 42, 54: 42, 55: 42, 52: 42, 44: 42, 50: 42, 53: 42, 47: 42, 49: 42, 58: 42 },
    { },
    { 54: 42, 30: 42, 48: 42, 43: 42, 51: 42, 38: 42, 39: 42, 57: 42, 56: 42, 46: 42, 22: 42, 35: 42, 50: 42, 53: 42, 40: 42, 42: 42, 41: 26, 55: 42, 37: 42, 44: 42, 49: 42, 58: 42, 45: 42, 52: 42, 47: 42 },
    { 38: 42, 53: 42, 39: 42, 44: 11, 42: 42, 51: 42, 43: 42, 49: 42, 52: 42, 40: 42, 41: 42, 47: 42, 50: 42, 54: 42, 57: 42, 55: 42, 48: 42, 37: 42, 22: 42, 45: 42, 35: 42, 30: 42, 56: 42, 58: 42, 46: 42 },
    { 40: 42, 42: 42, 45: 42, 37: 42, 56: 42, 47: 42, 30: 42, 48: 42, 49: 42, 22: 42, 44: 42, 58: 42, 46: 42, 51: 42, 38: 42, 35: 42, 50: 42, 54: 42, 39: 42, 52: 42, 43: 23, 41: 42, 53: 42, 57: 42, 55: 42 },
    { },
    { },
    { },
    { 45: 42, 46: 42, 53: 42, 30: 42, 52: 42, 22: 42, 49: 42, 47: 42, 50: 42, 37: 42, 40: 42, 41: 42, 57: 42, 35: 42, 58: 42, 55: 42, 48: 42, 56: 42, 42: 42, 38: 42, 44: 42, 51: 42, 54: 42, 39: 42, 43: 42 },
    { 47: 42, 46: 42, 52: 42, 53: 42, 30: 42, 43: 42, 37: 42, 56: 42, 54: 42, 49: 42, 58: 42, 39: 42, 57: 42, 38: 42, 48: 42, 45: 42, 40: 42, 41: 42, 50: 52, 22: 42, 35: 42, 51: 42, 44: 42, 55: 42, 42: 42 },
    { 46: 42, 39: 42, 54: 42, 44: 42, 37: 42, 42: 42, 45: 42, 55: 42, 53: 42, 48: 42, 22: 42, 40: 42, 35: 42, 38: 42, 57: 42, 47: 42, 49: 42, 52: 42, 30: 42, 41: 42, 43: 42, 50: 42, 56: 42, 51: 42, 58: 42 },
    { 39: 42, 48: 42, 43: 45, 47: 42, 51: 42, 44: 42, 55: 42, 49: 42, 45: 42, 37: 42, 22: 42, 50: 42, 53: 42, 54: 42, 40: 42, 35: 42, 46: 42, 57: 42, 30: 42, 38: 42, 42: 42, 52: 42, 58: 42, 56: 42, 41: 42 },
    { 22: 42, 42: 42, 57: 42, 47: 42, 48: 42, 39: 60, 56: 42, 50: 42, 30: 42, 44: 42, 49: 42, 35: 42, 55: 42, 37: 42, 45: 42, 40: 42, 52: 42, 43: 42, 58: 42, 38: 42, 51: 42, 53: 42, 54: 42, 46: 42, 41: 42 },
    { },
    { 53: 42, 44: 42, 47: 42, 51: 42, 55: 42, 30: 42, 43: 42, 49: 42, 45: 42, 57: 42, 22: 42, 37: 42, 58: 42, 41: 42, 56: 42, 48: 42, 52: 42, 54: 42, 42: 42, 46: 42, 50: 42, 38: 42, 40: 42, 35: 42, 39: 42 },
    { 26: 57, 12: 57, 30: 57, 27: 57, 10: 57, 52: 57, 14: 57, 59: 57, 11: 57, 4: 57, 6: 57, 1: 57, 15: 57, 21: 57, 54: 57, 38: 57, 17: 57, 19: 57, 39: 57, 29: 57, 8: 57, 16: 58, 25: 57, 35: 57, 20: 57, 18: 57, 61: 57, 7: 57, 57: 57, 9: 57, 58: 57, 24: 57, 41: 57, 32: 57, 46: 57, 42: 57, 40: 57, 56: 57, 23: 57, 34: 57, 28: 57, 44: 57, 50: 57, 2: 57, 48: 57, 31: 57, 49: 57, 47: 57, 13: 57, 51: 57, 53: 57, 5: 57, 55: 57, 22: 57, 60: 57, 45: 57, 3: 57, 33: 57, 37: 57, 43: 57, 36: 57 },
    { 12: 57, 50: 57, 4: 57, 6: 57, 22: 57, 13: 57, 24: 57, 15: 57, 30: 57, 42: 57, 27: 57, 17: 57, 40: 57, 5: 57, 52: 57, 29: 57, 26: 57, 3: 57, 2: 57, 35: 57, 60: 57, 57: 57, 47: 57, 19: 57, 53: 57, 10: 57, 25: 57, 32: 57, 11: 57, 37: 57, 43: 57, 36: 57, 28: 57, 48: 57, 39: 57, 1: 57, 49: 57, 23: 57, 38: 57, 21: 43, 55: 57, 7: 57, 16: 57, 44: 57, 46: 57, 56: 57, 58: 57, 9: 57, 20: 57, 59: 57, 54: 57, 41: 57, 31: 57, 45: 57, 51: 57, 34: 57, 33: 57, 14: 57, 61: 57, 8: 57, 18: 57 },
    { 60: 59, 27: 59, 32: 25, 35: 59, 15: 59, 2: 59, 11: 59, 23: 59, 45: 59, 9: 31, 56: 59, 17: 59, 12: 59, 51: 59, 4: 59, 24: 59, 14: 59, 22: 59, 47: 59, 58: 59, 40: 59, 46: 59, 8: 59, 19: 59, 36: 59, 34: 59, 42: 59, 39: 59, 53: 59, 25: 59, 43: 59, 7: 59, 37: 59, 52: 59, 38: 59, 61: 59, 1: 59, 26: 59, 44: 59, 57: 59, 31: 59, 20: 59, 6: 59, 50: 59, 48: 59, 10: 59, 59: 59, 30: 59, 54: 59, 28: 59, 13: 59, 41: 59, 29: 59, 33: 59, 21: 59, 55: 59, 16: 59, 49: 59, 18: 59 },
    { 43: 42, 45: 42, 35: 42, 37: 42, 56: 42, 57: 42, 47: 42, 50: 42, 38: 42, 51: 42, 42: 42, 46: 42, 54: 42, 49: 42, 58: 42, 30: 42, 53: 42, 44: 42, 41: 42, 39: 42, 55: 42, 48: 42, 22: 42, 52: 42, 40: 42 },
    { 48: 42, 53: 42, 58: 42, 39: 42, 57: 33, 54: 42, 22: 42, 40: 42, 43: 42, 41: 42, 38: 42, 47: 42, 42: 42, 56: 42, 50: 42, 51: 42, 45: 53, 52: 42, 46: 42, 55: 42, 37: 42, 49: 42, 35: 42, 30: 42, 44: 42 },
    { 47: 42, 50: 42, 49: 42, 35: 42, 42: 42, 56: 42, 30: 42, 44: 42, 55: 42, 39: 42, 48: 42, 40: 42, 45: 42, 57: 42, 41: 42, 37: 42, 46: 42, 51: 42, 53: 42, 54: 18, 52: 42, 38: 42, 43: 42, 58: 42, 22: 42 },
}
var accept = map[int]TokenType { 8: 20, 16: 23, 17: 23, 20: 12, 39: 17, 43: 1, 47: 26, 56: 9, 10: 23, 13: 23, 29: 23, 38: 15, 49: 19, 53: 23, 60: 3, 62: 23, 3: 23, 9: 23, 34: 0, 35: 13, 36: 23, 48: 22, 7: 23, 11: 23, 22: 10, 26: 2, 40: 11, 61: 23, 32: 23, 45: 23, 52: 4, 55: 25, 5: 14, 14: 23, 23: 5, 44: 23, 50: 6, 31: 24, 1: 7, 6: 23, 18: 8, 21: 23, 28: 18, 30: 23, 41: 16, 2: 23, 12: 23, 24: 21, 33: 23, 42: 23, 46: 23, 51: 23, 54: 23 }

// Base lexer interface.
type BaseLexer interface { Next() Token }
// Lexer struct. Produces token stream.
type Lexer struct {
    stream  *InputStream
    handler LexerErrorHandler
}

// Input stream struct. Produces character stream.
type InputStream struct {
    reader        *bufio.Reader
    location      Location
    buffer, stack []streamData
}
type streamData struct { char rune; location Location }

// Function called when the lexer encounters an error. Expected to bring input stream to synchronization point.
type LexerErrorHandler func (stream *InputStream, char rune, location Location)
var DEFAULT_LEXER_HANDLER = func (stream *InputStream, char rune, location Location) {
    // Format special characters
    var str string
    switch char {
    case ' ':        str = "space"
    case '\t':       str = "tab"
    case '\n', '\r': str = "new line"
    case 0:          str = "end of file"
    default:         str = fmt.Sprintf("character %q", string(char))
    }
    // Print formatted error message given an unexpected character
    fmt.Printf("Syntax error: Unexpected %s - %d:%d\n", str, location.Line, location.Col)
    // Find synchronization point
    var whitespace = []rune { 0, ' ', '\t', '\n', '\r' }
    for {
        if char := stream.next(); slices.Contains(whitespace, char) { break }
    }
}

// Returns new lexer struct. Initializes lexer with initial token.
func NewLexer(reader *bufio.Reader, handler LexerErrorHandler) *Lexer {
    stream := &InputStream { reader, Location { 1, 1 }, make([]streamData, 0), make([]streamData, 0) }
    lexer := &Lexer { stream, handler }
    return lexer
}

// Emits next token in stream.
func (l *Lexer) Next() Token {
    start := l.stream.location
    input, stack := make([]rune, 0), make([]int, 0)
    i, state := 0, 0
    for {
        // Read current character in stream and add to input
        char := l.stream.Read(); input = append(input, char)
        next, ok := transitions[state][searchRange(char)]
        if !ok { break } // Exit loop if we cannot transition from this state on the character
        // Store the visited states since the last occurring accepting state
        if _, ok := accept[state]; ok { stack = stack[:0] }
        stack = append(stack, state)
        state = next
        i++
    }
    // Backtrack to last accepting state
    var token TokenType
    for {
        // Unread current character
        l.stream.Unread()
        if t, ok := accept[state]; ok { token = t; break }
        if len(stack) == 0 {
            // If no accepting state was encountered, raise error and synchronize
            l.stream.synchronize(l.handler, input[i], l.stream.location)
            return l.Next() // Attempt to read token again
        }
        // Restore previously visited states
        state, stack = stack[len(stack) - 1], stack[:len(stack) - 1]
        i--
    }
    end := l.stream.stack[len(l.stream.stack) - 1].location
    l.stream.reset()
    if _, ok := skip[token]; ok { return l.Next() } // Skip token
    // Create token struct
    return Token { token, string(input[:i]), start, end }
}

// Returns the next character in the input stream while maintaining location.
func (i *InputStream) Read() rune {
    // Store previous location in stack and read next character
    l := i.location; char := i.next()
    i.stack = append(i.stack, streamData { char, l })
    return char
}

func (i *InputStream) next() rune {
    // If buffered data exists, consume it before requesting new data from the reader
    if len(i.buffer) > 0 {
        data := i.buffer[len(i.buffer) - 1]; i.buffer = i.buffer[:len(i.buffer) - 1]
        i.location = data.location
        return data.char
    }
    char, _, err := i.reader.ReadRune()
    if err != nil { return 0 } // Return a null character if stream does not have any more characters to emit
    // Update current location based on character read
    l := &i.location
    switch char {
    case '\n': l.Line++; l.Col = 1
    default: l.Col++
    }
    return char
}

// Unreads the current character in the input stream while maintaining location.
func (i *InputStream) Unread() {
    if len(i.stack) == 0 { return }
    data := i.stack[len(i.stack) - 1]; i.stack = i.stack[:len(i.stack) - 1]
    l := i.location; i.location = data.location
    i.buffer = append(i.buffer, streamData{ data.char, l })
}

// Releases previously read characters.
func (i *InputStream) reset() { i.stack = i.stack[:0] }
func (i *InputStream) synchronize(handler LexerErrorHandler, char rune, location Location) {
    i.reset()
    handler(i, char, location)
    i.reset()
}

// Run binary search on character to find index associated with the range that contains the character.
func searchRange(char rune) int {
    low, high := 0, len(ranges) - 1
    for low <= high {
        mid := (low + high) / 2
        r := ranges[mid]
        if char >= r.Min && char <= r.Max { return mid }
        if char > r.Max {
            low = mid + 1
        } else {
            high = mid - 1
        }
    }
    return -1
}

// FOR DEBUG PURPOSES:
// Consumes all tokens emitted by lexer and prints them to the standard output.
func (l *Lexer) PrintTokens() {
    for {
        token := l.Next()
        location := fmt.Sprintf("%d:%d-%d:%d", token.Start.Line, token.Start.Col, token.End.Line, token.End.Col)
        fmt.Printf("%-16s | %-16s %-16s\n", location, token.Type, token.Value)
        if token.Type == EOF { break }
    }
}
