package lynn

import (
	"bufio"
	"fmt"
	"slices"
)

// Represents type of token as an enumerated integer.
type TokenType uint
// Location struct. Holds line and column of token.
type Location struct { Line, Col int }
// Token struct. Holds type, value, and location of token.
type Token struct {
    Type       TokenType
    Value      string
    Start, End Location
}

// Represents a range between characters.
type Range struct { Min, Max rune }

const (WHITESPACE TokenType = iota; COMMENT; RULE; PRECEDENCE; TOKEN; FRAGMENT; LEFT; RIGHT; ERROR; SKIP; EQUAL; PLUS; STAR; QUESTION; DOT; BAR; HASH; PERCENT; SEMI; COLON; L_PAREN; R_PAREN; ARROW; IDENTIFIER; STRING; CLASS; EOF)
func (t TokenType) String() string { return typeName[t] }
var typeName = map[TokenType]string { 0: "WHITESPACE", 1: "COMMENT", 2: "RULE", 3: "PRECEDENCE", 4: "TOKEN", 5: "FRAGMENT", 6: "LEFT", 7: "RIGHT", 8: "ERROR", 9: "SKIP", 10: "EQUAL", 11: "PLUS", 12: "STAR", 13: "QUESTION", 14: "DOT", 15: "BAR", 16: "HASH", 17: "PERCENT", 18: "SEMI", 19: "COLON", 20: "L_PAREN", 21: "R_PAREN", 22: "ARROW", 23: "IDENTIFIER", 24: "STRING", 25: "CLASS", 26: "EOF" }
var skip = map[TokenType]struct{} { 0: {}, 1: {} }

var ranges = []Range { { '\x00', '\x00' }, { '\x01', '\b' }, { '\t', '\t' }, { '\n', '\n' }, { '\v', '\f' }, { '\r', '\r' }, { '\x0e', '\x1f' }, { ' ', ' ' }, { '!', '!' }, { '"', '"' }, { '#', '#' }, { '$', '$' }, { '%', '%' }, { '&', '\'' }, { '(', '(' }, { ')', ')' }, { '*', '*' }, { '+', '+' }, { ',', ',' }, { '-', '-' }, { '.', '.' }, { '/', '/' }, { '0', '9' }, { ':', ':' }, { ';', ';' }, { '<', '<' }, { '=', '=' }, { '>', '>' }, { '?', '?' }, { '@', '@' }, { 'A', 'Z' }, { '[', '[' }, { '\\', '\\' }, { ']', ']' }, { '^', '^' }, { '_', '_' }, { '`', '`' }, { 'a', 'a' }, { 'b', 'b' }, { 'c', 'c' }, { 'd', 'd' }, { 'e', 'e' }, { 'f', 'f' }, { 'g', 'g' }, { 'h', 'h' }, { 'i', 'i' }, { 'j', 'j' }, { 'k', 'k' }, { 'l', 'l' }, { 'm', 'm' }, { 'n', 'n' }, { 'o', 'o' }, { 'p', 'p' }, { 'q', 'q' }, { 'r', 'r' }, { 's', 's' }, { 't', 't' }, { 'u', 'u' }, { 'v', 'z' }, { '{', '{' }, { '|', '|' }, { '}', '\U0010ffff' } }
var transitions = []map[int]int {
    { 16: 44, 43: 30, 24: 35, 48: 2, 58: 30, 53: 30, 54: 59, 49: 30, 52: 41, 14: 16, 21: 10, 17: 56, 9: 46, 26: 26, 45: 30, 57: 30, 3: 39, 5: 39, 46: 30, 30: 30, 56: 49, 41: 18, 12: 31, 2: 39, 23: 32, 40: 30, 37: 30, 50: 30, 31: 5, 47: 30, 44: 30, 60: 6, 35: 30, 38: 30, 19: 61, 51: 30, 39: 30, 0: 13, 7: 39, 15: 53, 42: 62, 28: 14, 10: 58, 20: 24, 55: 1 },
    { 57: 30, 54: 30, 42: 30, 45: 30, 53: 30, 39: 30, 51: 30, 41: 30, 49: 30, 43: 30, 48: 30, 52: 30, 58: 30, 37: 30, 38: 30, 50: 30, 30: 30, 56: 30, 47: 34, 44: 30, 35: 30, 46: 30, 55: 30, 22: 30, 40: 30 },
    { 47: 30, 54: 30, 44: 30, 48: 30, 50: 30, 43: 30, 38: 30, 53: 30, 30: 30, 49: 30, 39: 30, 41: 45, 45: 30, 57: 30, 58: 30, 40: 30, 46: 30, 37: 30, 52: 30, 56: 30, 22: 30, 35: 30, 42: 30, 55: 30, 51: 30 },
    { 38: 30, 43: 30, 49: 30, 22: 30, 42: 30, 41: 30, 52: 30, 53: 30, 57: 30, 40: 30, 35: 30, 56: 30, 55: 30, 50: 30, 58: 30, 45: 30, 39: 30, 46: 30, 47: 30, 51: 30, 30: 30, 54: 52, 37: 30, 48: 30, 44: 30 },
    { 51: 30, 55: 30, 53: 30, 46: 30, 47: 30, 50: 30, 45: 30, 57: 30, 39: 30, 22: 30, 48: 30, 43: 30, 42: 30, 52: 30, 41: 30, 54: 23, 40: 30, 49: 30, 30: 30, 37: 30, 35: 30, 44: 30, 58: 30, 38: 30, 56: 30 },
    { 21: 5, 51: 5, 40: 5, 57: 5, 53: 5, 52: 5, 4: 5, 15: 5, 2: 5, 8: 5, 42: 5, 13: 5, 10: 5, 35: 5, 18: 5, 26: 5, 61: 5, 38: 5, 17: 5, 14: 5, 48: 5, 33: 43, 46: 5, 25: 5, 32: 60, 59: 5, 6: 5, 23: 5, 54: 5, 60: 5, 45: 5, 9: 5, 31: 5, 44: 5, 41: 5, 28: 5, 55: 5, 58: 5, 22: 5, 47: 5, 39: 5, 27: 5, 16: 5, 20: 5, 50: 5, 19: 5, 43: 5, 34: 5, 12: 5, 24: 5, 49: 5, 56: 5, 36: 5, 11: 5, 1: 5, 29: 5, 7: 5, 37: 5, 30: 5 },
    { },
    { 49: 30, 54: 30, 57: 30, 41: 30, 48: 30, 39: 30, 46: 30, 22: 30, 58: 30, 55: 30, 38: 30, 52: 30, 47: 30, 43: 30, 51: 30, 30: 30, 35: 30, 37: 30, 53: 30, 56: 30, 50: 30, 42: 30, 44: 30, 45: 30, 40: 30 },
    { 41: 30, 53: 30, 56: 30, 37: 30, 35: 30, 55: 30, 51: 30, 49: 30, 52: 30, 47: 30, 39: 30, 54: 30, 50: 30, 30: 30, 22: 30, 58: 30, 45: 30, 57: 30, 40: 30, 48: 30, 38: 30, 42: 30, 46: 30, 44: 30, 43: 30 },
    { 56: 30, 30: 30, 49: 30, 45: 30, 47: 30, 50: 30, 46: 30, 42: 30, 55: 30, 48: 30, 43: 30, 54: 30, 37: 30, 52: 38, 53: 30, 38: 30, 51: 30, 41: 30, 35: 30, 40: 30, 44: 30, 57: 30, 39: 30, 58: 30, 22: 30 },
    { 16: 42, 21: 17 },
    { },
    { 33: 42, 26: 42, 35: 42, 47: 42, 51: 42, 50: 42, 21: 11, 34: 42, 18: 42, 61: 42, 10: 42, 48: 42, 36: 42, 30: 42, 52: 42, 12: 42, 11: 42, 60: 42, 39: 42, 3: 42, 16: 42, 58: 42, 20: 42, 46: 42, 25: 42, 40: 42, 1: 42, 7: 42, 6: 42, 59: 42, 29: 42, 37: 42, 22: 42, 53: 42, 13: 42, 28: 42, 9: 42, 43: 42, 41: 42, 56: 42, 17: 42, 2: 42, 42: 42, 32: 42, 55: 42, 23: 42, 57: 42, 24: 42, 45: 42, 4: 42, 5: 42, 15: 42, 19: 42, 49: 42, 31: 42, 38: 42, 27: 42, 14: 42, 8: 42, 54: 42, 44: 42 },
    { },
    { },
    { 47: 30, 49: 30, 55: 30, 57: 30, 45: 30, 39: 30, 30: 30, 40: 30, 37: 30, 22: 30, 54: 30, 46: 30, 38: 30, 53: 30, 56: 30, 51: 30, 48: 30, 52: 30, 35: 30, 44: 30, 41: 30, 43: 30, 50: 30, 58: 30, 42: 30 },
    { },
    { 23: 17, 7: 17, 38: 17, 58: 17, 27: 17, 31: 17, 49: 17, 47: 17, 16: 17, 36: 17, 56: 17, 28: 17, 32: 17, 1: 17, 8: 17, 48: 17, 3: 11, 55: 17, 53: 17, 20: 17, 19: 17, 26: 17, 39: 17, 34: 17, 50: 17, 11: 17, 29: 17, 13: 17, 35: 17, 0: 11, 14: 17, 54: 17, 45: 17, 9: 17, 21: 17, 59: 17, 33: 17, 57: 17, 41: 17, 4: 17, 2: 17, 37: 17, 30: 17, 51: 17, 61: 17, 5: 11, 44: 17, 46: 17, 22: 17, 60: 17, 15: 17, 24: 17, 6: 17, 12: 17, 52: 17, 42: 17, 10: 17, 17: 17, 40: 17, 18: 17, 43: 17, 25: 17 },
    { 49: 30, 42: 30, 39: 30, 41: 30, 43: 30, 58: 30, 46: 30, 35: 30, 40: 30, 45: 30, 53: 30, 38: 30, 54: 3, 48: 30, 52: 30, 51: 30, 22: 30, 57: 30, 50: 30, 30: 30, 44: 30, 55: 30, 37: 30, 47: 30, 56: 30 },
    { },
    { 39: 30, 44: 30, 52: 30, 48: 30, 37: 33, 43: 30, 42: 30, 40: 30, 38: 30, 50: 30, 51: 30, 30: 30, 45: 30, 47: 30, 57: 30, 46: 30, 53: 30, 22: 30, 54: 30, 58: 30, 41: 30, 55: 30, 35: 30, 56: 30, 49: 30 },
    { 51: 30, 30: 30, 46: 30, 22: 30, 42: 30, 57: 30, 54: 30, 43: 30, 53: 30, 50: 30, 58: 30, 35: 30, 55: 30, 41: 30, 47: 30, 40: 30, 49: 30, 37: 30, 38: 30, 56: 54, 39: 30, 45: 30, 44: 30, 48: 30, 52: 30 },
    { 50: 8, 41: 30, 22: 30, 56: 30, 58: 30, 45: 30, 49: 30, 39: 30, 42: 30, 48: 30, 55: 30, 30: 30, 44: 30, 37: 30, 52: 30, 40: 30, 51: 30, 35: 30, 47: 30, 43: 30, 46: 30, 53: 30, 57: 30, 54: 30, 38: 30 },
    { 40: 30, 46: 30, 48: 30, 41: 30, 45: 30, 53: 30, 39: 30, 51: 30, 47: 30, 56: 30, 43: 30, 30: 30, 54: 30, 22: 30, 37: 30, 42: 30, 49: 30, 57: 30, 50: 30, 38: 30, 44: 30, 55: 30, 52: 30, 35: 30, 58: 30 },
    { },
    { },
    { },
    { 44: 30, 49: 30, 39: 30, 50: 30, 58: 30, 35: 30, 47: 30, 38: 30, 53: 30, 42: 30, 46: 30, 52: 30, 43: 30, 22: 30, 37: 30, 45: 30, 48: 30, 30: 30, 56: 30, 57: 30, 51: 30, 54: 30, 55: 30, 40: 30, 41: 22 },
    { 51: 30, 30: 30, 22: 30, 55: 30, 45: 30, 37: 30, 48: 29, 43: 30, 35: 30, 41: 30, 50: 30, 49: 30, 38: 30, 57: 30, 40: 30, 56: 30, 42: 30, 44: 30, 53: 30, 46: 30, 58: 30, 47: 30, 52: 30, 39: 30, 54: 30 },
    { 57: 30, 50: 30, 42: 30, 40: 30, 41: 7, 53: 30, 47: 30, 46: 30, 48: 30, 39: 30, 52: 30, 51: 30, 43: 30, 54: 30, 30: 30, 55: 30, 38: 30, 58: 30, 49: 30, 44: 30, 35: 30, 22: 30, 56: 30, 37: 30, 45: 30 },
    { 49: 30, 55: 30, 30: 30, 53: 30, 57: 30, 51: 30, 58: 30, 38: 30, 52: 30, 41: 30, 45: 30, 46: 30, 48: 30, 39: 30, 50: 30, 37: 30, 43: 30, 54: 30, 56: 30, 47: 30, 22: 30, 40: 30, 35: 30, 44: 30, 42: 30 },
    { },
    { },
    { 54: 30, 42: 30, 46: 30, 39: 30, 51: 30, 41: 30, 53: 30, 30: 30, 55: 30, 43: 48, 47: 30, 38: 30, 35: 30, 50: 30, 58: 30, 37: 30, 45: 30, 49: 30, 56: 30, 40: 30, 52: 30, 22: 30, 57: 30, 44: 30, 48: 30 },
    { 52: 30, 50: 30, 44: 30, 55: 30, 51: 30, 46: 30, 54: 30, 40: 30, 56: 30, 43: 30, 38: 30, 30: 30, 41: 30, 42: 30, 22: 30, 49: 30, 48: 30, 37: 30, 57: 30, 35: 30, 39: 30, 45: 9, 58: 30, 47: 30, 53: 30 },
    { },
    { 55: 30, 54: 30, 44: 37, 39: 30, 51: 30, 43: 30, 40: 30, 38: 30, 45: 30, 50: 30, 30: 30, 49: 30, 48: 30, 57: 30, 41: 30, 56: 30, 37: 30, 46: 30, 35: 30, 47: 30, 22: 30, 52: 30, 58: 30, 42: 30, 53: 30 },
    { 46: 30, 43: 30, 51: 30, 42: 30, 56: 15, 39: 30, 35: 30, 38: 30, 55: 30, 53: 30, 48: 30, 52: 30, 54: 30, 40: 30, 37: 30, 45: 30, 58: 30, 44: 30, 50: 30, 41: 30, 47: 30, 57: 30, 30: 30, 49: 30, 22: 30 },
    { 46: 30, 39: 30, 51: 30, 55: 30, 50: 30, 22: 30, 30: 30, 41: 30, 35: 30, 42: 30, 47: 30, 56: 30, 49: 30, 52: 30, 48: 30, 53: 30, 58: 30, 38: 30, 54: 30, 37: 30, 57: 30, 44: 30, 45: 30, 40: 30, 43: 30 },
    { 7: 39, 2: 39, 3: 39, 5: 39 },
    { 43: 36, 51: 30, 46: 30, 30: 30, 45: 30, 39: 30, 49: 30, 38: 30, 56: 30, 35: 30, 41: 30, 48: 30, 44: 30, 53: 30, 54: 30, 22: 30, 37: 30, 57: 30, 42: 30, 47: 30, 40: 30, 55: 30, 52: 30, 50: 30, 58: 30 },
    { 42: 30, 44: 30, 46: 30, 37: 30, 48: 30, 54: 55, 41: 30, 45: 30, 22: 30, 47: 30, 43: 30, 53: 30, 51: 30, 57: 30, 50: 30, 30: 30, 49: 30, 56: 30, 40: 30, 52: 30, 39: 30, 35: 30, 38: 30, 55: 30, 58: 30 },
    { 21: 42, 53: 42, 14: 42, 39: 42, 32: 42, 18: 42, 20: 42, 33: 42, 26: 42, 37: 42, 45: 42, 60: 42, 8: 42, 54: 42, 48: 42, 59: 42, 30: 42, 22: 42, 4: 42, 19: 42, 40: 42, 11: 42, 15: 42, 41: 42, 46: 42, 43: 42, 51: 42, 16: 12, 49: 42, 6: 42, 1: 42, 7: 42, 58: 42, 5: 42, 42: 42, 3: 42, 27: 42, 23: 42, 12: 42, 38: 42, 28: 42, 2: 42, 24: 42, 29: 42, 17: 42, 55: 42, 10: 42, 52: 42, 56: 42, 25: 42, 35: 42, 36: 42, 34: 42, 13: 42, 47: 42, 57: 42, 61: 42, 9: 42, 31: 42, 44: 42, 50: 42 },
    { },
    { },
    { 53: 30, 50: 30, 41: 30, 42: 21, 44: 30, 48: 30, 56: 30, 30: 30, 52: 30, 45: 30, 37: 30, 22: 30, 46: 30, 54: 30, 58: 30, 35: 30, 51: 30, 55: 30, 38: 30, 57: 30, 39: 30, 47: 30, 40: 30, 49: 30, 43: 30 },
    { 18: 46, 54: 46, 42: 46, 15: 46, 58: 46, 37: 46, 48: 46, 59: 46, 55: 46, 13: 46, 46: 46, 25: 46, 31: 46, 6: 46, 26: 46, 56: 46, 41: 46, 23: 46, 43: 46, 30: 46, 21: 46, 22: 46, 10: 46, 8: 46, 60: 46, 14: 46, 34: 46, 24: 46, 38: 46, 40: 46, 1: 46, 4: 46, 20: 46, 16: 46, 50: 46, 33: 46, 39: 46, 7: 46, 2: 46, 49: 46, 27: 46, 45: 46, 36: 46, 52: 46, 12: 46, 9: 25, 19: 46, 44: 46, 11: 46, 28: 46, 53: 46, 47: 46, 32: 57, 35: 46, 17: 46, 29: 46, 51: 46, 61: 46, 57: 46 },
    { 55: 30, 46: 30, 48: 30, 41: 30, 38: 30, 50: 30, 30: 30, 45: 30, 43: 30, 52: 30, 35: 30, 42: 30, 53: 30, 40: 30, 54: 30, 56: 30, 51: 30, 58: 30, 47: 30, 57: 30, 44: 30, 37: 30, 22: 30, 49: 30, 39: 30 },
    { 58: 30, 47: 30, 35: 30, 46: 30, 37: 30, 57: 30, 56: 30, 49: 30, 52: 30, 53: 30, 40: 30, 42: 30, 30: 30, 50: 30, 41: 30, 45: 30, 38: 30, 43: 30, 22: 30, 51: 30, 39: 30, 54: 30, 44: 30, 55: 30, 48: 30 },
    { 42: 30, 50: 30, 46: 30, 35: 30, 38: 30, 57: 30, 53: 30, 51: 50, 40: 30, 45: 30, 56: 30, 41: 30, 49: 30, 54: 30, 55: 30, 37: 30, 39: 30, 48: 30, 58: 30, 30: 30, 47: 30, 43: 30, 44: 30, 22: 30, 52: 30 },
    { 41: 30, 45: 30, 38: 30, 39: 30, 51: 30, 55: 30, 50: 30, 54: 30, 42: 30, 46: 30, 57: 30, 35: 30, 43: 30, 48: 30, 53: 30, 30: 30, 49: 30, 37: 30, 40: 30, 56: 30, 22: 30, 47: 27, 52: 30, 44: 30, 58: 30 },
    { 57: 30, 40: 30, 47: 30, 53: 30, 51: 30, 48: 30, 56: 30, 45: 30, 37: 30, 38: 30, 49: 30, 43: 30, 41: 30, 55: 30, 52: 30, 54: 30, 44: 30, 22: 30, 50: 30, 30: 30, 39: 47, 58: 30, 35: 30, 46: 30, 42: 30 },
    { 58: 30, 30: 30, 47: 30, 41: 30, 56: 30, 50: 30, 55: 30, 43: 30, 45: 30, 49: 30, 57: 30, 51: 4, 42: 30, 44: 30, 46: 30, 48: 30, 39: 30, 37: 30, 52: 30, 40: 30, 22: 30, 53: 30, 38: 30, 54: 30, 35: 30 },
    { },
    { 42: 30, 50: 30, 40: 30, 41: 30, 30: 30, 44: 30, 46: 30, 47: 30, 48: 30, 55: 30, 56: 30, 39: 30, 43: 30, 38: 30, 52: 30, 22: 30, 58: 30, 57: 30, 37: 30, 45: 30, 51: 30, 35: 30, 49: 30, 53: 30, 54: 30 },
    { 46: 30, 49: 30, 43: 30, 22: 30, 58: 30, 30: 30, 40: 30, 55: 30, 37: 30, 57: 30, 50: 30, 48: 30, 35: 30, 47: 30, 53: 30, 41: 51, 54: 30, 56: 30, 39: 30, 44: 30, 45: 30, 38: 30, 51: 30, 52: 30, 42: 30 },
    { },
    { 16: 46, 33: 46, 55: 46, 1: 46, 19: 46, 47: 46, 46: 46, 8: 46, 41: 46, 45: 46, 58: 46, 42: 46, 4: 46, 7: 46, 39: 46, 31: 46, 25: 46, 51: 46, 53: 46, 49: 46, 32: 46, 24: 46, 6: 46, 21: 46, 13: 46, 61: 46, 59: 46, 34: 46, 28: 46, 14: 46, 22: 46, 29: 46, 52: 46, 44: 46, 23: 46, 43: 46, 17: 46, 11: 46, 18: 46, 10: 46, 15: 46, 38: 46, 57: 46, 2: 46, 48: 46, 30: 46, 12: 46, 20: 46, 40: 46, 50: 46, 27: 46, 35: 46, 9: 46, 37: 46, 60: 46, 56: 46, 36: 46, 26: 46, 54: 46 },
    { },
    { 42: 30, 40: 30, 49: 30, 51: 30, 52: 30, 53: 30, 22: 30, 30: 30, 54: 30, 41: 30, 56: 30, 55: 30, 43: 30, 50: 30, 39: 30, 47: 30, 38: 30, 48: 30, 45: 40, 58: 30, 35: 30, 37: 30, 57: 28, 44: 30, 46: 30 },
    { 31: 5, 49: 5, 32: 5, 4: 5, 37: 5, 19: 5, 44: 5, 52: 5, 56: 5, 61: 5, 17: 5, 18: 5, 40: 5, 9: 5, 39: 5, 53: 5, 46: 5, 13: 5, 16: 5, 54: 5, 26: 5, 14: 5, 25: 5, 57: 5, 27: 5, 43: 5, 20: 5, 28: 5, 48: 5, 12: 5, 24: 5, 2: 5, 30: 5, 35: 5, 15: 5, 11: 5, 59: 5, 41: 5, 29: 5, 38: 5, 55: 5, 45: 5, 8: 5, 58: 5, 51: 5, 34: 5, 42: 5, 7: 5, 21: 5, 50: 5, 22: 5, 60: 5, 33: 5, 23: 5, 10: 5, 47: 5, 6: 5, 36: 5, 1: 5 },
    { 27: 19 },
    { 44: 30, 35: 30, 51: 30, 40: 30, 37: 30, 49: 30, 58: 30, 30: 30, 45: 30, 55: 30, 56: 30, 39: 30, 48: 30, 41: 30, 52: 30, 53: 30, 50: 30, 42: 30, 47: 30, 43: 30, 22: 30, 57: 30, 46: 30, 38: 30, 54: 20 },
}
var accept = map[int]TokenType { 36: 23, 40: 23, 49: 23, 50: 23, 8: 4, 15: 7, 33: 23, 45: 23, 54: 6, 55: 23, 56: 11, 53: 21, 62: 23, 11: 1, 13: 26, 27: 23, 28: 23, 29: 23, 31: 17, 32: 19, 38: 9, 4: 23, 7: 2, 22: 23, 23: 8, 25: 24, 35: 18, 51: 23, 14: 13, 16: 20, 18: 23, 24: 14, 30: 23, 34: 23, 41: 23, 43: 25, 3: 23, 6: 15, 19: 22, 26: 10, 39: 0, 47: 3, 52: 23, 9: 23, 21: 23, 37: 23, 44: 12, 48: 5, 58: 16, 59: 23, 1: 23, 2: 23, 20: 23 }

// Base lexer interface.
type BaseLexer interface { Next() Token }
// Lexer struct. Produces token stream.
type Lexer struct {
    stream  *InputStream
    handler LexerErrorHandler
}

// Input stream struct. Produces character stream.
type InputStream struct {
    reader        *bufio.Reader
    location      Location
    buffer, stack []streamData
}
type streamData struct { char rune; location Location }

// Function called when the lexer encounters an error. Expected to bring input stream to synchronization point.
type LexerErrorHandler func (stream *InputStream, char rune, location Location)
var DEFAULT_LEXER_HANDLER = func (stream *InputStream, char rune, location Location) {
    // Format special characters
    var str string
    switch char {
    case ' ':        str = "space"
    case '\t':       str = "tab"
    case '\n', '\r': str = "new line"
    case 0:          str = "end of file"
    default:         str = fmt.Sprintf("character %q", string(char))
    }
    // Print formatted error message given an unexpected character
    fmt.Printf("Syntax error: Unexpected %s - %d:%d\n", str, location.Line, location.Col)
    // Find synchronization point
    var whitespace = []rune { 0, ' ', '\t', '\n', '\r' }
    for {
        if char := stream.next(); slices.Contains(whitespace, char) { break }
    }
}

// Returns new lexer struct. Initializes lexer with initial token.
func NewLexer(reader *bufio.Reader, handler LexerErrorHandler) *Lexer {
    stream := &InputStream { reader, Location { 1, 1 }, make([]streamData, 0), make([]streamData, 0) }
    lexer := &Lexer { stream, handler }
    return lexer
}

// Emits next token in stream.
func (l *Lexer) Next() Token {
    start := l.stream.location
    input, stack := make([]rune, 0), make([]int, 0)
    i, state := 0, 0
    for {
        // Read current character in stream and add to input
        char := l.stream.Read(); input = append(input, char)
        next, ok := transitions[state][searchRange(char)]
        if !ok { break } // Exit loop if we cannot transition from this state on the character
        // Store the visited states since the last occurring accepting state
        if _, ok := accept[state]; ok { stack = stack[:0] }
        stack = append(stack, state)
        state = next
        i++
    }
    // Backtrack to last accepting state
    var token TokenType
    for {
        // Unread current character
        l.stream.Unread()
        if t, ok := accept[state]; ok { token = t; break }
        if len(stack) == 0 {
            // If no accepting state was encountered, raise error and synchronize
            l.stream.synchronize(l.handler, input[i], l.stream.location)
            return l.Next() // Attempt to read token again
        }
        // Restore previously visited states
        state, stack = stack[len(stack) - 1], stack[:len(stack) - 1]
        i--
    }
    end := l.stream.stack[len(l.stream.stack) - 1].location
    l.stream.reset()
    if _, ok := skip[token]; ok { return l.Next() } // Skip token
    // Create token struct
    return Token { token, string(input[:i]), start, end }
}

// Returns the next character in the input stream while maintaining location.
func (i *InputStream) Read() rune {
    // Store previous location in stack and read next character
    l := i.location; char := i.next()
    i.stack = append(i.stack, streamData { char, l })
    return char
}

func (i *InputStream) next() rune {
    // If buffered data exists, consume it before requesting new data from the reader
    if len(i.buffer) > 0 {
        data := i.buffer[len(i.buffer) - 1]; i.buffer = i.buffer[:len(i.buffer) - 1]
        i.location = data.location
        return data.char
    }
    char, _, err := i.reader.ReadRune()
    if err != nil { return 0 } // Return a null character if stream does not have any more characters to emit
    // Update current location based on character read
    l := &i.location
    switch char {
    case '\n': l.Line++; l.Col = 1
    default: l.Col++
    }
    return char
}

// Unreads the current character in the input stream while maintaining location.
func (i *InputStream) Unread() {
    if len(i.stack) == 0 { return }
    data := i.stack[len(i.stack) - 1]; i.stack = i.stack[:len(i.stack) - 1]
    l := i.location; i.location = data.location
    i.buffer = append(i.buffer, streamData{ data.char, l })
}

// Releases previously read characters.
func (i *InputStream) reset() { i.stack = i.stack[:0] }
func (i *InputStream) synchronize(handler LexerErrorHandler, char rune, location Location) {
    i.reset()
    handler(i, char, location)
    i.reset()
}

// Run binary search on character to find index associated with the range that contains the character.
func searchRange(char rune) int {
    low, high := 0, len(ranges) - 1
    for low <= high {
        mid := (low + high) / 2
        r := ranges[mid]
        if char >= r.Min && char <= r.Max { return mid }
        if char > r.Max {
            low = mid + 1
        } else {
            high = mid - 1
        }
    }
    return -1
}

// FOR DEBUG PURPOSES:
// Consumes all tokens emitted by lexer and prints them to the standard output.
func (l *Lexer) PrintTokens() {
    for {
        token := l.Next()
        location := fmt.Sprintf("%d:%d-%d:%d", token.Start.Line, token.Start.Col, token.End.Line, token.End.Col)
        fmt.Printf("%-16s | %-16s %-16s\n", location, token.Type, token.Value)
        if token.Type == EOF { break }
    }
}
