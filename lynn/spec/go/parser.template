package /*{0}*/

import (
	"fmt"
	"os"
	"strings"
)

// Production data struct. Expresses a sequence of symbols that a given non-terminal may be expanded to in a grammar.
type productionData struct {
    productionType int
    left, length   int
    visitor        string
    aliases        map[string]int
}

// Parse table entry struct. Holds action entries and goto table for a specific state.
type tableEntry struct {
    actions map[int]actionEntry
    gotos   map[int]int
}
// Parse table action entry struct. Holds action type and integer parameter.
type actionEntry struct {
    actionType, value int // For shift actions, value represents a state identifier, for reduce actions, a production identifier
}

// Parse tree child interface. May either be a Token or ParseTreeNode struct.
type ParseTreeChild interface { string(indent string) string }
// Parse tree node struct. Contains child nodes and location range.
type ParseTreeNode struct {
    Children   []ParseTreeChild
    Start, End Location
    data       *productionData
}

var productions = []productionData {
/*{1}*/
}
var parseTable = []tableEntry {
/*{2}*/
}

// Parser struct. Converts token stream to parse tree.
type Parser struct {
    lexer   BaseLexer
    handler ParserErrorHandler
}

// Base visitor interface. Describes functions necessary to implement to traverse parse tree.
type BaseVisitor[T any] interface {
/*{3}*/
}

// Function called when the parser encounters an error.
type ParserErrorHandler func (token Token)
var DEFAULT_PARSER_HANDLER = func (token Token) {
    fmt.Fprintf(os.Stderr, "Syntax error: Unexpected token %q - %d:%d\n", token.Value, token.Start.Line, token.Start.Col)
}

// Returns new parser struct.
func NewParser(lexer BaseLexer, handler ParserErrorHandler) *Parser { return &Parser { lexer, handler } }
// Generates parse tree based on token stream from lexer.
func (p *Parser) Parse() *ParseTreeNode {
    // Stack state struct. Holds the state identifier and the corresponding parse tree node.
    type StackState struct {
        state int
        node  ParseTreeChild
    }
    // Production and action type enums
    const (NORMAL int = iota; AUXILIARY; FLATTEN; REMOVED)
    const (SHIFT int = iota; REDUCE; ACCEPT)
    // Initialize current token and stack
    token, stack := p.lexer.Next(), []StackState { { 0, nil } }
    main: for {
        // Get the current state at the top of the stack and find the action to take
        // Next action is determined by action table given state index and the current token type
        state := stack[len(stack) - 1].state
        action, ok := parseTable[state].actions[int(token.Type)]
        if !ok {
            // If the table does not have a valid action, cannot parse current token
            p.handler(token)
            for {
                // Pop states off the stack until a valid shift action on the error terminal is found
                if len(stack) == 0 { return nil }
                if action, ok := parseTable[state].actions[-1]; ok && action.actionType == SHIFT {
                    // Shift token that caused error onto stack
                    // Then enter panic mode and read tokens until a valid action can be made
                    stack = append(stack, StackState { action.value, token })
                    for {
                        token = p.lexer.Next()
                        if _, ok := parseTable[action.value].actions[int(token.Type)]; ok { continue main }
                        if token.Type == EOF { return nil }
                    }
                }
                i := len(stack) - 1; stack = stack[:i]
                state = stack[i - 1].state
            }
        }
        switch action.actionType {
        case SHIFT:
            // For shift actions, add new state to the stack along with token
            stack = append(stack, StackState { action.value, token })
            token = p.lexer.Next()
        case REDUCE:
            // For reduce actions, pop states off stack and merge children into one node based on production
            production := &productions[action.value]
            i := len(stack) - production.length
            var node ParseTreeChild
            switch production.productionType {
            case NORMAL:
                // Handle normal productions
                // Collect child nodes from current states on the stack and create node for reduction
                children := make([]ParseTreeChild, production.length)
                for i, s := range stack[i:] { children[i] = s.node }
                // Find start and end locations
                start, end := findLocationRange(children)
                node = &ParseTreeNode { children, start, end, production }
            case FLATTEN:
                // Handle flatten productions
                // Of the two nodes popped, preserve the first and add the second as a child of the first
                // Results in quantified expressions in the grammar generating arrays of elements
                list, element := stack[i].node.(*ParseTreeNode), stack[i + 1].node
                list.Children = append(list.Children, element)
                switch n := element.(type) {
                case *ParseTreeNode: list.End = n.End
                case Token:          list.End = n.End
                }
                node = list
            case AUXILIARY: node = stack[i].node // For auxiliary productions, pass child through without generating new node
            case REMOVED:   node = nil // Add nil value for removed productions
            }
            // Pop consumed states off stack
            // Given new state at the top of the stack, find next state based on the goto table
            stack = stack[:i]
            state := stack[i - 1].state
            next := parseTable[state].gotos[production.left]
            // Add new state to top of the stack
            stack = append(stack, StackState { next, node })
        // Return non-terminal in auxiliary start production on accept
        case ACCEPT: return stack[1].node.(*ParseTreeNode)
        }
    }
}

// Given a list of children, find the location range that they occupy
func findLocationRange(children []ParseTreeChild) (Location, Location) {
    var start, end Location
    for _, c := range children {
        // The start location is determined by the start of the first non-nil child
        switch n := c.(type) {
        case nil: continue
        case *ParseTreeNode: start = n.Start
        case Token:          start = n.Start
        }
        break
    }
    for i := len(children) - 1; i >= 0; i-- {
        c := children[i]
        // The end location is determined by the end of the last non-nil child
        switch n := c.(type) {
        case nil: continue
        case *ParseTreeNode: end = n.End
        case Token:          end = n.End
        }
        break
    }
    return start, end
}

// Given a parse tree node, dispatches the corresponding function in the visitor.
func VisitNode[T any](visitor BaseVisitor[T], node ParseTreeChild) T {
    if n, ok := node.(*ParseTreeNode); ok {
        switch n.data.visitor {
/*{4}*/
        }
    }
    panic("Invalid parse tree child passed to VisitNode()")
}

/*{5}*/

// Given an alias, return the corresponding parse tree node child based on the production data.
func (n *ParseTreeNode) GetAlias(alias string) ParseTreeChild {
    if n.data.aliases == nil { return nil }
    if i, ok := n.data.aliases[alias]; ok { return n.Children[i] }
    return nil
}

// FOR DEBUG PURPOSES:
// Prints the parse tree to the standard output.
func (n *ParseTreeNode) Print() { fmt.Println(n.string("")) }

func (t Token) string(indent string) string { return fmt.Sprintf("%s<%s %s>", indent, t.Type, t.Value) }
func (n *ParseTreeNode) string(indent string) string {
    children := make([]string, len(n.Children))
    next := indent + "  "
    for i, c := range n.Children {
        str := "\n"
        if c == nil {
            str += fmt.Sprintf("%s<nil>", next)
        } else {
            str += c.string(next)
        }
        children[i] = str
    }
    return fmt.Sprintf("%s[%s]%s", indent, n.data.visitor, strings.Join(children, ""))
}
