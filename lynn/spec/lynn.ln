rule grammar : stmt* ;
rule stmt
    : RULE       IDENTIFIER ":" expr ";"                 #ruleStmt
    | PRECEDENCE IDENTIFIER v=(":" a=(LEFT | RIGHT))?    #precedenceStmt
    | TOKEN      IDENTIFIER ":" expr s=("->" SKIP)? ";"  #tokenStmt
    | FRAGMENT   IDENTIFIER ":" expr ";"                 #fragmentStmt
    | error ";"
    ;

prec union  : left
prec label
prec concat : left
prec alias
prec quantifier
rule expr
    : l=expr "|" r=expr                        #unionExpr      %union
    | expr "#" IDENTIFIER p=("%" IDENTIFIER)?  #labelExpr      %label
    | l=expr r=expr                            #concatExpr     %concat
    | IDENTIFIER "=" expr                      #aliasExpr      %alias
    | expr op=("?" | "*" | "+")                #quantifierExpr %quantifier
    | "(" expr ")"                             #groupExpr
    | IDENTIFIER                               #identifierExpr
    | STRING                                   #stringExpr
    | CLASS                                    #classExpr
    | ERROR                                    #errorExpr
    | "."                                      #anyExpr
    ;

token WHITESPACE : [ \t\n\r]+ -> skip ;
token COMMENT    : "//" .* [\n\r\0] | "/*" ("*" [^/] | [^*])* "*/" -> skip ;

token RULE       : "rule" ;
token PRECEDENCE : "prec" ;
token TOKEN      : "token" ;
token FRAGMENT   : "frag" ;
token LEFT       : "left" ;
token RIGHT      : "right" ;
token ERROR      : "error" ;
token SKIP       : "skip" ;

token EQUAL      : "=" ;
token PLUS       : "+" ;
token STAR       : "*" ;
token QUESTION   : "?" ;
token DOT        : "." ;
token BAR        : "|" ;
token HASH       : "#" ;
token PERCENT    : "%" ;
token SEMI       : ";" ;
token COLON      : ":" ;
token L_PAREN    : "(" ;
token R_PAREN    : ")" ;
token ARROW      : "->" ;

token IDENTIFIER : LETTER (LETTER | DIGIT)* ;
token STRING     : "\"" ([^\\\n\r"] | ESCAPE)* "\"" ;
token CLASS      : "[" "^"? ([^\\\n\r\]] | ESCAPE)* "]" ;

frag DIGIT   : [0-9] ;
frag LETTER  : [a-zA-Z_] ;
frag HEX     : [0-9a-zA-Z] ;
frag ESCAPE  : "\\" ([^\n\rxuU] | "x" HEX HEX | "u" HEX HEX HEX HEX | "U" HEX HEX HEX HEX HEX HEX HEX HEX) ;
