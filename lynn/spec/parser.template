package /*{0}*/

import (
	"fmt"
	"strings"
)

// Production type enum. Either NORMAL, AUXILIARY, FLATTEN, OR REMOVED.
type ProductionType uint
const (NORMAL ProductionType = iota; AUXILIARY; FLATTEN; REMOVED)
// Production data struct. Expresses a sequence of symbols that a given non-terminal may be expanded to in a grammar.
type ProductionData struct {
    Type         ProductionType
    Left, Length int
    Visitor      string
}

// Action type enum. Either SHIFT, REDUCE, or ACCEPT.
type ActionType uint
const (SHIFT ActionType = iota; REDUCE; ACCEPT)
// Parse table action entry struct. Holds action type and integer parameter.
type ActionEntry struct {
    Type  ActionType
    Value int // For SHIFT actions, value represents a state identifier, for REDUCE actions, a production identifier
}

// Parse tree child interface. May either be a Token or ParseTreeNode struct.
type ParseTreeChild interface { string(indent string) string }
type ParseTreeNode struct {
    Visitor  string
    Children []ParseTreeChild
}

var productions = []ProductionData {
/*{1}*/
}
var actionTable = []map[TokenType]ActionEntry {
/*{2}*/
}
var gotoTable = []map[int]int {
/*{3}*/
}

// Parser struct. Converts token stream to parse tree.
type Parser struct {
    lexer *Lexer
}

// Returns new parser struct.
func NewParser(lexer *Lexer) *Parser { return &Parser { lexer } }
// Generates parse tree based on token stream from lexer.
func (p *Parser) Parse() *ParseTreeNode {
    // Stack state struct. Holds the state identifier and the corresponding parse tree node.
    type StackState struct {
        state int
        node  ParseTreeChild
    }
    // Initialize current token and stack
    token, stack := p.lexer.Token, []StackState { { 0, nil } }
    for {
        // Get the current state at the top of the stack and find the action to take
        // Next action is determined by action table given state index and the current token type
        state := stack[len(stack) - 1].state
        action, ok := actionTable[state][token.Type]
        if !ok {
            // If the table does not have a valid action, cannot parse current token
            fmt.Printf("Syntax error: Unexpected token %q - %d:%d\n", token.Value, token.Start.Line, token.Start.Col)
            return nil
        }
        switch action.Type {
        case SHIFT:
            // For shift actions, add new state to the stack along with token
            stack = append(stack, StackState { action.Value, token })
            token = p.lexer.Next()
        case REDUCE:
            // For reduce actions, pop states off stack and merge children into one node based on production
            production := &productions[action.Value]
            i := len(stack) - production.Length
            var node ParseTreeChild
            switch production.Type {
            case NORMAL:
                // Collect child nodes from current states on the stack and create node for reduction
                children := make([]ParseTreeChild, production.Length)
                for i, s := range stack[i:] { children[i] = s.node }
                node = &ParseTreeNode { production.Visitor, children }
            case FLATTEN:
                // Of the two nodes popped, preserve the first and add the second as a child of the first
                // Results in quantified expressions in the grammar generating arrays of elements
                list, element := stack[i].node.(*ParseTreeNode), stack[i + 1].node
                list.Children = append(list.Children, element)
                node = list
            case AUXILIARY: node = stack[i].node // Passes child through without generating new node
            case REMOVED:   node = nil // Adds a nil value
            }
            // Pop consumed states off stack
            // Given new state at the top of the stack, find next state based on the goto table
            stack = stack[:i]
            state := stack[i - 1].state
            next := gotoTable[state][production.Left]
            // Add new state to top of the stack
            stack = append(stack, StackState { next, node })
        case ACCEPT: return stack[1].node.(*ParseTreeNode)
        }
    }
}

// FOR DEBUG PURPOSES:
// Prints the parse tree to the standard output.
func (n *ParseTreeNode) Print() { fmt.Println(n.string("")) }

func (t Token) string(indent string) string { return fmt.Sprintf("%s<%s %s>", indent, t.Type, t.Value) }
func (n *ParseTreeNode) string(indent string) string {
    children := make([]string, len(n.Children))
    next := indent + "  "
    for i, c := range n.Children {
        str := "\n"
        if c == nil {
            str += fmt.Sprintf("%s<nil>", next)
        } else {
            str += c.string(next)
        }
        children[i] = str
    }
    return fmt.Sprintf("%s[%s]%s", indent, n.Visitor, strings.Join(children, ""))
}
